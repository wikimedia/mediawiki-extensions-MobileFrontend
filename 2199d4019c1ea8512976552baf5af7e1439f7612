{
  "comments": [
    {
      "key": {
        "uuid": "c8a7cebf_0aafc298",
        "filename": "src/mobile.mediaViewer/promisedImage.js",
        "patchSetId": 2
      },
      "lineNbr": 12,
      "author": {
        "id": 94
      },
      "writtenOn": "2019-03-12T22:56:32Z",
      "side": 1,
      "message": "Should this be passed in directly without props for consistency with the promisedView\n\nI\u0027m noticing that we only use props on View\u0027s (things that extend View) but don\u0027t seem to be following this pattern on our factory functions.",
      "revId": "2199d4019c1ea8512976552baf5af7e1439f7612",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0b6484a8_ce3171f6",
        "filename": "src/mobile.mediaViewer/promisedImage.js",
        "patchSetId": 2
      },
      "lineNbr": 12,
      "author": {
        "id": 6176
      },
      "writtenOn": "2019-03-13T18:54:01Z",
      "side": 1,
      "message": "Can we talk about this more? In a super-happy-dev-time on Dec 10, we had a related discussion on props vs options and came to a conclusion:\n\n```\nMF: What should we call the options param that we often use in the constructor of our components?\n     * \"props\"? https://gerrit.wikimedia.org/r/#/c/mediawiki/extensions/MobileFrontend/+/476423/7/src/mobile.startup/Panel.js@15\n     * \"params\"? https://gerrit.wikimedia.org/r/#/c/mediawiki/extensions/MobileFrontend/+/476423/8/resources/mobile.editor.common/EditorOverlayBase.js\n     * \"options\"? https://gerrit.wikimedia.org/r/#/c/mediawiki/extensions/MobileFrontend/+/476423/8/src/mobile.startup/Page.js\n     * \"proptions\"? \"paraops\"?\n     \n    - For view related code, call it \u0027props\u0027. For non-views, call it \u0027options\u0027\n```\n\nI think if we are easing our way into React, it makes sense to me that all view related code is passed as a props object, but maybe others feel differently about that now",
      "parentUuid": "c8a7cebf_0aafc298",
      "revId": "2199d4019c1ea8512976552baf5af7e1439f7612",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1d865a2f_c4414fcb",
        "filename": "src/mobile.mediaViewer/promisedImage.js",
        "patchSetId": 2
      },
      "lineNbr": 12,
      "author": {
        "id": 94
      },
      "writtenOn": "2019-03-13T19:30:59Z",
      "side": 1,
      "message": "Sure but languageOverlay takes a single parameter - a page gateway instance and talkOverlay takes 2 parameters - title and gateway.\n\nThis feels more like those 2 things as it\u0027s not a component as such but a helper/factory function.",
      "parentUuid": "0b6484a8_ce3171f6",
      "revId": "2199d4019c1ea8512976552baf5af7e1439f7612",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c294107f_3535188d",
        "filename": "src/mobile.mediaViewer/promisedImage.js",
        "patchSetId": 2
      },
      "lineNbr": 12,
      "author": {
        "id": 6176
      },
      "writtenOn": "2019-03-14T17:53:28Z",
      "side": 1,
      "message": "I did the destructuring in lastest patch as discussed. If I switch to individual params here, then it makes it inconsistent with my the other components. It\u0027s doable to change those as well but hopefully the destructing makes it more readable",
      "parentUuid": "1d865a2f_c4414fcb",
      "revId": "2199d4019c1ea8512976552baf5af7e1439f7612",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "323f734d_a7a6fb50",
        "filename": "src/mobile.mediaViewer/promisedImage.js",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 94
      },
      "writtenOn": "2019-03-12T22:56:32Z",
      "side": 1,
      "message": "What if this returned a promise rather than a View? Would that not separate the concerns of obtaining the image and rendering the image?\n\nIt feels like there might actually be 2 functions here (loading an image via a promise asynchronously and a usage of promisedView)",
      "revId": "2199d4019c1ea8512976552baf5af7e1439f7612",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ca70f899_17f85674",
        "filename": "src/mobile.mediaViewer/promisedImage.js",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 6176
      },
      "writtenOn": "2019-03-13T18:54:01Z",
      "side": 1,
      "message": "I\u0027m confused what purpose it would serve to return a promise ( given that the promise is passed in). This component was made to return a view so that imageCarousel wouldn\u0027t have to take on that responsibility of rendering the async image/loading and rendering the error view.  The spinner is only shown while the promise is resolving (that is from promisedView) but we show the image as it is loading.",
      "parentUuid": "323f734d_a7a6fb50",
      "revId": "2199d4019c1ea8512976552baf5af7e1439f7612",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8f799836_4aab4352",
        "filename": "src/mobile.mediaViewer/promisedImage.js",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 94
      },
      "writtenOn": "2019-03-13T19:30:59Z",
      "side": 1,
      "message": "See my comment below.",
      "parentUuid": "ca70f899_17f85674",
      "revId": "2199d4019c1ea8512976552baf5af7e1439f7612",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "51d59760_0cd08d98",
        "filename": "src/mobile.mediaViewer/promisedImage.js",
        "patchSetId": 2
      },
      "lineNbr": 29,
      "author": {
        "id": 94
      },
      "writtenOn": "2019-03-12T22:56:32Z",
      "side": 1,
      "message": "Why wouldn\u0027t the user of promisedImage do that as part of their promise resolution?\n\ne.g. promisedImage( promise().then(()\u003d\u003eonBeforeImageLoad) );",
      "revId": "2199d4019c1ea8512976552baf5af7e1439f7612",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cd6cf2f3_2b764a94",
        "filename": "src/mobile.mediaViewer/promisedImage.js",
        "patchSetId": 2
      },
      "lineNbr": 29,
      "author": {
        "id": 6176
      },
      "writtenOn": "2019-03-13T18:54:01Z",
      "side": 1,
      "message": "I agree with this, this logic should probably be moved into imageCarousel.js. Will do.",
      "parentUuid": "51d59760_0cd08d98",
      "revId": "2199d4019c1ea8512976552baf5af7e1439f7612",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "306d4ea8_c66d96a5",
        "filename": "src/mobile.mediaViewer/promisedImage.js",
        "patchSetId": 2
      },
      "lineNbr": 29,
      "author": {
        "id": 6176
      },
      "writtenOn": "2019-03-14T17:53:28Z",
      "side": 1,
      "message": "Removed in latest patch in favor of making imageCarousel add a .then",
      "parentUuid": "cd6cf2f3_2b764a94",
      "revId": "2199d4019c1ea8512976552baf5af7e1439f7612",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6792fbee_1ce56f15",
        "filename": "src/mobile.mediaViewer/promisedImage.js",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 94
      },
      "writtenOn": "2019-03-12T22:56:32Z",
      "side": 1,
      "message": "What if we resolved a promise here instead?",
      "revId": "2199d4019c1ea8512976552baf5af7e1439f7612",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c8c59716_f9f6ab22",
        "filename": "src/mobile.mediaViewer/promisedImage.js",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 6176
      },
      "writtenOn": "2019-03-13T18:54:01Z",
      "side": 1,
      "message": "Can you elaborate more on why we would do that? Currently, after the promise resolves the spinner is replaced with the image load. promisedView does nothing with the actual image load but this component is helpful because we need the same error view shown if either the promise rejects or the actual image load fails",
      "parentUuid": "6792fbee_1ce56f15",
      "revId": "2199d4019c1ea8512976552baf5af7e1439f7612",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1adbaf27_a5a505c8",
        "filename": "src/mobile.mediaViewer/promisedImage.js",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 94
      },
      "writtenOn": "2019-03-13T19:30:59Z",
      "side": 1,
      "message": "I guess my confusion lies in the asyncImageFn. It feels to me that it should be rejecting when an error occurs and resolving when the image is loading.\n\nI was imagining something like this:\n```\npromisedView( props.asyncImageFn().then(function ( props ) {\n  return View( { tagName: \u0027img\u0027, ... props } );\n}, function () {\n  return loadErrorView;\n} );\n```\n\nHere it feels like we are mixing view responsibilities with gateway responsibilities.",
      "parentUuid": "c8c59716_f9f6ab22",
      "revId": "2199d4019c1ea8512976552baf5af7e1439f7612",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "db8cbbb1_c05831f1",
        "filename": "src/mobile.mediaViewer/promisedImage.js",
        "patchSetId": 2
      },
      "lineNbr": 36,
      "author": {
        "id": 94
      },
      "writtenOn": "2019-03-12T22:56:32Z",
      "side": 1,
      "message": "what if we rejected a promise here instead?",
      "revId": "2199d4019c1ea8512976552baf5af7e1439f7612",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f93eb3d5_60b8c990",
        "filename": "src/mobile.mediaViewer/promisedImage.js",
        "patchSetId": 2
      },
      "lineNbr": 45,
      "author": {
        "id": 94
      },
      "writtenOn": "2019-03-12T22:56:32Z",
      "side": 1,
      "message": "You could also do attr( { src: data.src, alt: data.alt } ) here",
      "revId": "2199d4019c1ea8512976552baf5af7e1439f7612",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f14b44b0_ee836183",
        "filename": "src/mobile.mediaViewer/promisedImage.js",
        "patchSetId": 2
      },
      "lineNbr": 45,
      "author": {
        "id": 6176
      },
      "writtenOn": "2019-03-14T17:53:28Z",
      "side": 1,
      "message": "In my tests I rely on the attr method being two params so I can stub the image states more easily. It\u0027s brittle, but I can\u0027t think of a better way to test the image states rn. \n\nAs an aside, I\u0027m thinking we should add a callback to promisedView when it has replaced the view it creates to make testing easier. promisedView tests rely on multiple .then calls so that it can test when promisedView is done with the replacement. What do you think?",
      "parentUuid": "f93eb3d5_60b8c990",
      "revId": "2199d4019c1ea8512976552baf5af7e1439f7612",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    }
  ]
}