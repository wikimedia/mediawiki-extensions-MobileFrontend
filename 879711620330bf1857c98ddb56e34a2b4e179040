{
  "comments": [
    {
      "key": {
        "uuid": "03e09ed5_e28df64e",
        "filename": "resources/mobile.editor.api/EditorGateway.js",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 34
      },
      "writtenOn": "2018-07-05T20:59:35Z",
      "side": 1,
      "message": "This is now partly unused, should presumably be on line 39.",
      "range": {
        "startLine": 36,
        "startChar": 4,
        "endLine": 36,
        "endChar": 10
      },
      "revId": "879711620330bf1857c98ddb56e34a2b4e179040",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b1d631ef_56d538db",
        "filename": "resources/mobile.editor.api/EditorGateway.js",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 94
      },
      "writtenOn": "2018-07-05T21:03:55Z",
      "side": 1,
      "message": "Partly yes and yes it\u0027s L39. Any ideas of how we might clean that up? I couldn\u0027t work out a neat way to do that.",
      "parentUuid": "03e09ed5_e28df64e",
      "range": {
        "startLine": 36,
        "startChar": 4,
        "endLine": 36,
        "endChar": 10
      },
      "revId": "879711620330bf1857c98ddb56e34a2b4e179040",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "407530dc_8bf97519",
        "filename": "resources/mobile.editor.api/EditorGateway.js",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 34
      },
      "writtenOn": "2018-07-05T22:38:35Z",
      "side": 1,
      "message": "I\u0027d recommend an early return for both cases. Thus essentially moving the creation of Deferred() to the one case that needs a custom Deferred (because it\u0027s not actually async, but simulates it for consistency).\n\nBasically:\n\n if ...  {\n     - result.resolve( ... );\n     + return util.Deferred().resolve( ... );\n }\n\nThe final \u0027return result\u0027 becomes redundant as well.",
      "parentUuid": "b1d631ef_56d538db",
      "range": {
        "startLine": 36,
        "startChar": 4,
        "endLine": 36,
        "endChar": 10
      },
      "revId": "879711620330bf1857c98ddb56e34a2b4e179040",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2844f9ce_f6dad5c4",
        "filename": "resources/mobile.editor.api/EditorGateway.js",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 94
      },
      "writtenOn": "2018-07-05T23:08:43Z",
      "side": 1,
      "message": "That makes sense, but what about line 72. I can\u0027t throw an exception here can I?",
      "parentUuid": "407530dc_8bf97519",
      "range": {
        "startLine": 36,
        "startChar": 4,
        "endLine": 36,
        "endChar": 10
      },
      "revId": "879711620330bf1857c98ddb56e34a2b4e179040",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e39f733d_faae0ef7",
        "filename": "resources/mobile.editor.api/EditorGateway.js",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 34
      },
      "writtenOn": "2018-07-07T07:18:06Z",
      "side": 1,
      "message": "You can, actually.\n\nBut it\u0027d be easier/more consistent to use deferreds. Deferred should always return new deferreds (or throw). Returning something other than a deferred is the same as returning `Deferred().resolve( otherThing );`.\n\nDor line 72, the idiomatic way to handle that with promises would be to return Promise.reject( .. ), or, in Deferred lingo, return Deferred().reject( .. ) - on line 72.",
      "parentUuid": "2844f9ce_f6dad5c4",
      "range": {
        "startLine": 36,
        "startChar": 4,
        "endLine": 36,
        "endChar": 10
      },
      "revId": "879711620330bf1857c98ddb56e34a2b4e179040",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    }
  ]
}