{
  "comments": [
    {
      "key": {
        "uuid": "e81df47d_000b84bb",
        "filename": "tests/phpunit/content-providers/MwApiContentProviderTest.php",
        "patchSetId": 8
      },
      "lineNbr": 37,
      "author": {
        "id": 3945
      },
      "writtenOn": "2019-01-08T16:46:41Z",
      "side": 1,
      "message": "it\u0027s not required to mock the StatusValue, just use `StatusValue::newGood()`, or `StatusValue::newFatal()` depends on the case.",
      "range": {
        "startLine": 35,
        "startChar": 2,
        "endLine": 37,
        "endChar": 24
      },
      "revId": "7f1f1b8f1072f7c7375673978001f0c6bc16e01f",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "054a141b_ccab3c1f",
        "filename": "tests/phpunit/content-providers/MwApiContentProviderTest.php",
        "patchSetId": 8
      },
      "lineNbr": 37,
      "author": {
        "id": 2842
      },
      "writtenOn": "2019-01-09T21:40:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e81df47d_000b84bb",
      "range": {
        "startLine": 35,
        "startChar": 2,
        "endLine": 37,
        "endChar": 24
      },
      "revId": "7f1f1b8f1072f7c7375673978001f0c6bc16e01f",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7bf310f5_dd1b17a4",
        "filename": "tests/phpunit/content-providers/MwApiContentProviderTest.php",
        "patchSetId": 8
      },
      "lineNbr": 46,
      "author": {
        "id": 3945
      },
      "writtenOn": "2019-01-08T16:46:41Z",
      "side": 1,
      "message": "as Thiemo said, we can use $this-\u003ecreateMock()",
      "range": {
        "startLine": 39,
        "startChar": 21,
        "endLine": 46,
        "endChar": 30
      },
      "revId": "7f1f1b8f1072f7c7375673978001f0c6bc16e01f",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "36e75cb0_273177d7",
        "filename": "tests/phpunit/content-providers/MwApiContentProviderTest.php",
        "patchSetId": 8
      },
      "lineNbr": 46,
      "author": {
        "id": 2842
      },
      "writtenOn": "2019-01-09T21:40:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7bf310f5_dd1b17a4",
      "range": {
        "startLine": 39,
        "startChar": 21,
        "endLine": 46,
        "endChar": 30
      },
      "revId": "7f1f1b8f1072f7c7375673978001f0c6bc16e01f",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "23701d62_890483d3",
        "filename": "tests/phpunit/content-providers/MwApiContentProviderTest.php",
        "patchSetId": 8
      },
      "lineNbr": 69,
      "author": {
        "id": 3945
      },
      "writtenOn": "2019-01-08T16:46:41Z",
      "side": 1,
      "message": "see previous comment regarding the StatusValue",
      "range": {
        "startLine": 67,
        "startChar": 2,
        "endLine": 69,
        "endChar": 25
      },
      "revId": "7f1f1b8f1072f7c7375673978001f0c6bc16e01f",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "05449ae6_423bf519",
        "filename": "tests/phpunit/content-providers/MwApiContentProviderTest.php",
        "patchSetId": 8
      },
      "lineNbr": 69,
      "author": {
        "id": 2842
      },
      "writtenOn": "2019-01-09T21:40:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "23701d62_890483d3",
      "range": {
        "startLine": 67,
        "startChar": 2,
        "endLine": 69,
        "endChar": 25
      },
      "revId": "7f1f1b8f1072f7c7375673978001f0c6bc16e01f",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "22c202e0_cd80dfaa",
        "filename": "tests/phpunit/content-providers/MwApiContentProviderTest.php",
        "patchSetId": 8
      },
      "lineNbr": 188,
      "author": {
        "id": 3945
      },
      "writtenOn": "2019-01-08T16:46:41Z",
      "side": 1,
      "message": "please verify that all data is set, you\u0027ll need to mock a couple more methods in the OutputPage mock (addModules, addModuleStyles, setProperty, addJsConfigVars and setLanguageLinks)",
      "range": {
        "startLine": 183,
        "startChar": 25,
        "endLine": 188,
        "endChar": 31
      },
      "revId": "7f1f1b8f1072f7c7375673978001f0c6bc16e01f",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f205978c_4052e68e",
        "filename": "tests/phpunit/content-providers/MwApiContentProviderTest.php",
        "patchSetId": 8
      },
      "lineNbr": 188,
      "author": {
        "id": 2842
      },
      "writtenOn": "2019-01-09T21:40:28Z",
      "side": 1,
      "message": "Yes, I agree with you, will handle this in PS10. PS9 applies the feedback above!",
      "parentUuid": "22c202e0_cd80dfaa",
      "range": {
        "startLine": 183,
        "startChar": 25,
        "endLine": 188,
        "endChar": 31
      },
      "revId": "7f1f1b8f1072f7c7375673978001f0c6bc16e01f",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "313525a9_56b11c05",
        "filename": "tests/phpunit/content-providers/MwApiContentProviderTest.php",
        "patchSetId": 8
      },
      "lineNbr": 188,
      "author": {
        "id": 2842
      },
      "writtenOn": "2019-01-11T20:21:51Z",
      "side": 1,
      "message": "@Pmiazga, I\u0027ve got a question, these methods are actually used to set particular properties in the output page object (in this case) and these methods also have methods for getting the values of these properties after setting them. How can we mock the method that sets them?\n\nI\u0027ve dumped the $mwApiContentProvider object on L171 and seen that properties are actually set but it\u0027s not yet clear how to go about mocking the methods you mentioned, a little help please? :)",
      "parentUuid": "f205978c_4052e68e",
      "range": {
        "startLine": 183,
        "startChar": 25,
        "endLine": 188,
        "endChar": 31
      },
      "revId": "7f1f1b8f1072f7c7375673978001f0c6bc16e01f",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cf82ff05_30091bd2",
        "filename": "tests/phpunit/content-providers/MwApiContentProviderTest.php",
        "patchSetId": 8
      },
      "lineNbr": 188,
      "author": {
        "id": 3945
      },
      "writtenOn": "2019-01-15T19:45:37Z",
      "side": 1,
      "message": "MWApiContentProvider only sets those values, to check that it\u0027s set properly you can do one of those two\n\n - mock the methods `addModules`, `addModulesStyles` ... and check that those are called with proper params\n - don\u0027t mock those, use OutputPage getters to verify those properties are set. \n\nThe second approach is a bit easier, if OutputPage is only a container (for example setLanguageLinks() does nothing, doesn\u0027t postprocess the data you\u0027re storing) then there is no need to stub setLanguageLinks method.\n\nIn different words (lets assume we\u0027re testing $myclass):\n\n   $data \u003d [\u0027somedata\u0027];\n   $myclass-\u003esetProperties( $data );\n   $myclass-\u003egetProperties() \u003d\u003d\u003d $data;\n\nthen just add assertions that Myclass getProperties() returns what you need, there is no need to mock the setProperties setter.\n\nOn the other, if there is any processing built into the method (like replacing spaces into _, or removing duplicates, for example check OutputPage::addCategoryLinks() which does lots of things when setting categoryLinks) then it\u0027s easier to stub the `addCategoryLinks()`. Why?, to verify that category links are properly set you would need to put some logic from addCategoryLinks into mock, there is no need to that. The OutputPage unit test should verify that all category links are properly set. You just want to verify that those are properly passed to the object. In that case, create a stub that verifies if addCategoryLinks() method is called with proper data.\n\nI hope it\u0027s clear. if what you set is what you get -\u003e just do assertion without stubbing method. If there is some processing involved - stubbing is the easier way.\n\nAlso, please keep in mind, that things like `addModules()` add something, OutputPage can have some $modules already defined. Instead of `assertSame`, most probably it would be the easiest to just use $this-\u003eassertArraySubset() - this will verify if that array has all keys you set (it can have more, but not less).",
      "parentUuid": "313525a9_56b11c05",
      "range": {
        "startLine": 183,
        "startChar": 25,
        "endLine": 188,
        "endChar": 31
      },
      "revId": "7f1f1b8f1072f7c7375673978001f0c6bc16e01f",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    }
  ]
}