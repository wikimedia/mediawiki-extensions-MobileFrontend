{
  "comments": [
    {
      "key": {
        "uuid": "7f09bcc7_df158f92",
        "filename": "includes/transforms/MoveLeadParagraphTransform.php",
        "patchSetId": 1
      },
      "lineNbr": 124,
      "author": {
        "id": 3945
      },
      "writtenOn": "2018-07-26T15:44:12Z",
      "side": 1,
      "message": "this will match any p element with `mw-empty-elt` string in the class attribute. It means it will also match `mw-empty-elt-2`, but I think that this an edge case and we shouldn\u0027t worry about it right now.\n\nThe searched classname is prefixed with `mw-`, users shouldn\u0027t use that prefix in their own styles.",
      "range": {
        "startLine": 123,
        "startChar": 33,
        "endLine": 124,
        "endChar": 38
      },
      "revId": "10267820c1bbe3263bcd9257c941602d4b022dc3",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "10347527_6a8762b1",
        "filename": "includes/transforms/MoveLeadParagraphTransform.php",
        "patchSetId": 1
      },
      "lineNbr": 124,
      "author": {
        "id": 34
      },
      "writtenOn": "2018-07-27T04:32:41Z",
      "side": 1,
      "message": "It might be easier to understand this code if the hasNoNonEmptyPrecedingParagraphs() check and the logic to find the lead paragraph would be one and the same. E.g. a \"find lead paragraph\" function that would start from a node and try to find one within a limited number of siblings before or after it (e.g. 5 or 10). We\u0027d use it negated to confirm there are none before infobox, and we\u0027d the take match after $infobox as $leadParagraph to move.\n\nThe current logic is quite minimal and possibly easier, but I can also see that, particularly from the intent of this commit, that we might want the extra abstraction/unification here.",
      "parentUuid": "7f09bcc7_df158f92",
      "range": {
        "startLine": 123,
        "startChar": 33,
        "endLine": 124,
        "endChar": 38
      },
      "revId": "10267820c1bbe3263bcd9257c941602d4b022dc3",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fc43b3e7_22eded9a",
        "filename": "includes/transforms/MoveLeadParagraphTransform.php",
        "patchSetId": 1
      },
      "lineNbr": 181,
      "author": {
        "id": 34
      },
      "writtenOn": "2018-07-27T04:25:55Z",
      "side": 1,
      "message": "This line of code seems like it may have been intended to match non-empty paragraphs. However, assuming PHP DOMElement resembles a standard DOM (I haven\u0027t checked), this check might not be working.\n\nSpecifically, the nodeValue property tends to exist only on Text nodes, which would not have made it through the nodeType filter, nor the tagName filter (and would have yielded \"Undefined tagName\").\n\nHowever, this seems like the perfect place to retrieve child nodes and assert that they resemble \"emptyness\", which I would define as follows:\n\n* Have no child nodes of type Element.\n* Have no child nodes of type Text having trim(nodeValue) !\u003d\u003d \u0027\u0027. \n\nIf there is no child nodes, or if there are only other childnode-types, or if there is one Element child, or one Text child with text that isn\u0027t timmable to \"\", then we\u0027ve got something.",
      "range": {
        "startLine": 181,
        "startChar": 10,
        "endLine": 181,
        "endChar": 60
      },
      "revId": "10267820c1bbe3263bcd9257c941602d4b022dc3",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    }
  ]
}