{
  "comments": [
    {
      "key": {
        "uuid": "8ec42329_027da8af",
        "filename": ".jscsrc",
        "patchSetId": 2
      },
      "lineNbr": 12,
      "author": {
        "id": 94
      },
      "writtenOn": "2015-08-06T17:43:54Z",
      "side": 1,
      "message": "still an indent problem",
      "revId": "7984145ff75a2106c0f55b4c267f5435de472511",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8ec42329_8890d646",
        "filename": ".jscsrc",
        "patchSetId": 2
      },
      "lineNbr": 18,
      "author": {
        "id": 94
      },
      "writtenOn": "2015-08-06T20:51:12Z",
      "side": 1,
      "message": "This won\u0027t work until I get this upstreamed (see https://github.com/jscs-dev/jscs-jsdoc/pull/138)",
      "revId": "7984145ff75a2106c0f55b4c267f5435de472511",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8ec42329_a8a6f2a5",
        "filename": "resources/mobile.bannerImage/MobileViewBannerImageRepository.js",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 94
      },
      "writtenOn": "2015-08-06T20:51:12Z",
      "side": 1,
      "message": "This is a property accessor and shouldn\u0027t be subject to this rule.\n\nIn core requireSpacesInsideArrayBrackets is null ...\nhttp://jscs.info/rule/requireSpacesInsideArrayBrackets.html",
      "revId": "7984145ff75a2106c0f55b4c267f5435de472511",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8ec42329_e27dfcad",
        "filename": "resources/mobile.editor.ve/VisualEditorOverlay.js",
        "patchSetId": 2
      },
      "lineNbr": 63,
      "author": {
        "id": 94
      },
      "writtenOn": "2015-08-06T17:43:54Z",
      "side": 1,
      "message": "Why is this a rule?\nIs this in the wikimedia preset.\nNothing wrong with previous code from my point of view.\nvar overlay \u003d this; would be neater anyhow",
      "revId": "7984145ff75a2106c0f55b4c267f5435de472511",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8ec42329_086e262a",
        "filename": "resources/mobile.editor.ve/VisualEditorOverlay.js",
        "patchSetId": 2
      },
      "lineNbr": 63,
      "author": {
        "id": 890
      },
      "writtenOn": "2015-08-06T21:18:53Z",
      "side": 1,
      "message": "I prefer this notation, too, because of the following reason (especially in php, but that can be adapted to JS, too): Think about a function with a lot of lines of code and anyone is initializing vars, where they want (e.g. WebRequest, OutputPage or some other commonly used objects). That leaves place for times, where two vars with the same object exists (e.g. $out and $output, both with the same instance of OutputPage). It\u0027s not an error per se, but it\u0027s a bit cleaner to initialize the common vars you need at one place so everyone knows, what is already available as a local var, and what not :) Usually a good place to do that is at the top of the function.\n\nThat\u0027s my point of view :)",
      "parentUuid": "8ec42329_e27dfcad",
      "revId": "7984145ff75a2106c0f55b4c267f5435de472511",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8ec42329_8250b837",
        "filename": "resources/mobile.errorReport/init.js",
        "patchSetId": 2
      },
      "lineNbr": 2,
      "author": {
        "id": 94
      },
      "writtenOn": "2015-08-06T17:43:54Z",
      "side": 1,
      "message": "Nope we should move all variable declarations up here and on a single line (e.g. as it was but just move to the top)",
      "revId": "7984145ff75a2106c0f55b4c267f5435de472511",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8ec42329_c207a01e",
        "filename": "resources/mobile.errorReport/init.js",
        "patchSetId": 2
      },
      "lineNbr": 2,
      "author": {
        "id": 366
      },
      "writtenOn": "2015-08-06T17:47:04Z",
      "side": 1,
      "message": "So the line written to execute before the var doesn\u0027t actually change any of them?",
      "parentUuid": "8ec42329_8250b837",
      "revId": "7984145ff75a2106c0f55b4c267f5435de472511",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8ec42329_e8595a90",
        "filename": "resources/mobile.errorReport/init.js",
        "patchSetId": 2
      },
      "lineNbr": 2,
      "author": {
        "id": 890
      },
      "writtenOn": "2015-08-06T21:18:53Z",
      "side": 1,
      "message": "not really, assertMode \"only\" aborts with the exception, if the module is loaded outside the defined modes. It could be a very tiny performance point to abort the execution as soon as possible, but assertMode shouldn\u0027t throw an exception in production, and if so, the tiny performance impact of initializing the vars before that, shouldn\u0027t matter :)",
      "parentUuid": "8ec42329_c207a01e",
      "revId": "7984145ff75a2106c0f55b4c267f5435de472511",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8ec42329_0264c80f",
        "filename": "tests/qunit/mobile.talk.overlays/test_TalkOverlay.js",
        "patchSetId": 2
      },
      "lineNbr": 32,
      "author": {
        "id": 94
      },
      "writtenOn": "2015-08-06T17:45:35Z",
      "side": 1,
      "message": "again separate line definitions should be used.",
      "revId": "7984145ff75a2106c0f55b4c267f5435de472511",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8ec42329_62490c8e",
        "filename": "tests/qunit/mobile.talk.overlays/test_TalkOverlay.js",
        "patchSetId": 2
      },
      "lineNbr": 34,
      "author": {
        "id": 94
      },
      "writtenOn": "2015-08-06T17:45:35Z",
      "side": 1,
      "message": "why does jscs not barf on this?",
      "revId": "7984145ff75a2106c0f55b4c267f5435de472511",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    }
  ]
}