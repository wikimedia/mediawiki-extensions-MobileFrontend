{
  "comments": [
    {
      "key": {
        "uuid": "b119fea6_826d7ac0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 8,
      "author": {
        "id": 2426
      },
      "writtenOn": "2019-03-26T16:27:35Z",
      "side": 1,
      "message": "For me, the questions persist: 1) how do we build composable components on the client side in the short term? 2) how would we migrate to a component framework?\n\nI hope this patch demonstrates an improved pattern for #1 and migration path for #2. Improved in the sense that work we do today is easy to read, reason about, and build upon, and not a confusing, wasted effort filled with complicated MobileFrontend-isms spread across many files. If not, I hope it demonstrates why we have to skip step #1 and jump directly to #2.\n\nIn the future, I hope better components patterns will make work like T214540 more of a task and less of an epic, that the outcome will be more polished, and that the code will be sustainable.",
      "revId": "354b4c6f9959831879cecf90ecf1892aa72bc373",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "345854e2_e3470359",
        "filename": "src/mobile.init/BetaOptInPanel.js",
        "patchSetId": 2
      },
      "lineNbr": 45,
      "author": {
        "id": 6176
      },
      "writtenOn": "2019-03-26T16:08:14Z",
      "side": 1,
      "message": "is the aim still to use  mw.html.escape with these interpolations?",
      "range": {
        "startLine": 45,
        "startChar": 44,
        "endLine": 45,
        "endChar": 51
      },
      "revId": "354b4c6f9959831879cecf90ecf1892aa72bc373",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "04287276_0f68db29",
        "filename": "src/mobile.init/BetaOptInPanel.js",
        "patchSetId": 2
      },
      "lineNbr": 45,
      "author": {
        "id": 2426
      },
      "writtenOn": "2019-03-26T16:27:35Z",
      "side": 1,
      "message": "Thanks, I forgot to add those and will.\n\nWRT implementation, I would like a more generic approach that any component could use but that might be hard to do without building a custom framework \u003e:[ Some related discussion in:\n\nhttps://phabricator.wikimedia.org/phame/post/view/90/mustache.js_replaced_with_javascript_template_literals_in_extension_popups/",
      "parentUuid": "345854e2_e3470359",
      "range": {
        "startLine": 45,
        "startChar": 44,
        "endLine": 45,
        "endChar": 51
      },
      "revId": "354b4c6f9959831879cecf90ecf1892aa72bc373",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "174dcd8b_bd481e57",
        "filename": "src/mobile.init/BetaOptInPanel.js",
        "patchSetId": 2
      },
      "lineNbr": 49,
      "author": {
        "id": 2426
      },
      "writtenOn": "2019-03-22T22:05:28Z",
      "side": 1,
      "message": "Maybe these would better as props so it looked more like HTML attributes?\n\n ${Button.html({ className: \u0027mw-ui-progressive optin\u0027, optInText })",
      "range": {
        "startLine": 49,
        "startChar": 19,
        "endLine": 49,
        "endChar": 57
      },
      "revId": "354b4c6f9959831879cecf90ecf1892aa72bc373",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dbee8980_71cc7a40",
        "filename": "src/mobile.init/BetaOptInPanel.js",
        "patchSetId": 2
      },
      "lineNbr": 49,
      "author": {
        "id": 6176
      },
      "writtenOn": "2019-03-26T16:08:14Z",
      "side": 1,
      "message": "I personally think the props pattern is clearer but I\u0027m not sure how other folks feel",
      "parentUuid": "174dcd8b_bd481e57",
      "range": {
        "startLine": 49,
        "startChar": 19,
        "endLine": 49,
        "endChar": 57
      },
      "revId": "354b4c6f9959831879cecf90ecf1892aa72bc373",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "78e483b2_7f99f79b",
        "filename": "src/mobile.init/BetaOptInPanel.js",
        "patchSetId": 2
      },
      "lineNbr": 50,
      "author": {
        "id": 2426
      },
      "writtenOn": "2019-03-30T05:44:56Z",
      "side": 1,
      "message": "This shows the most favorable example of a childless component. Container components will look less pretty, something like\n\n  ${FancyContainer.renderToString(\n    className: \u0027foo\u0027,\n    children: items.map(item \u003d\u003e FancyItem.renderToString)\n  )}\n\nOr maybe\n\n  ${FancyContainer.renderToString(\n    className: \u0027foo\u0027,\n    children: items,\n    childrenRenderToString: FancyItem.renderToString\n  )}\n\nBinding works similarly:\n\n  FancyContainer.bind(root.querySelector(\u0027.fancy-container.foo\u0027))\n  [...root.querySelectorAll(\u0027.fancy-item\u0027)].forEach(FancyItem.bind)\n\nOr maybe:\n\n  FancyContainer.bind(root.querySelector(\u0027.fancy-container.foo\u0027), FancyItem.bind)\n\nProbably worth exploring a little but basically the deeper or more complex this gets, the more we\u0027ll want a real framework. The same is true for the preexisting approach in master. There\u0027s some workarounds in use in master too like using a text-only label {{attribute}} for Button \"children\" instead of a template partial.",
      "range": {
        "startLine": 50,
        "startChar": 7,
        "endLine": 50,
        "endChar": 18
      },
      "revId": "354b4c6f9959831879cecf90ecf1892aa72bc373",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa4e5de4_6c8aa647",
        "filename": "src/mobile.init/BetaOptInPanel.js",
        "patchSetId": 2
      },
      "lineNbr": 83,
      "author": {
        "id": 2426
      },
      "writtenOn": "2019-03-22T23:41:00Z",
      "side": 1,
      "message": "It\u0027s important the constructor does not mix binding and html string responsibilities so that composition can have the same behavior. This is really only to give non-composition usages an API to interact with the component.\n\nWhat if we needed to add a counter that is rendered on a setTimeout() function? How would that work? It seems like that state would have to be accessible in bind(). I think this would be an extra state parameter that is passed to both bind and the constructor. Probably worth exploring.",
      "range": {
        "startLine": 81,
        "startChar": 0,
        "endLine": 83,
        "endChar": 2
      },
      "revId": "354b4c6f9959831879cecf90ecf1892aa72bc373",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "53600b9c_9160ccf4",
        "filename": "src/mobile.init/BetaOptInPanel.js",
        "patchSetId": 2
      },
      "lineNbr": 89,
      "author": {
        "id": 6176
      },
      "writtenOn": "2019-03-26T16:08:14Z",
      "side": 1,
      "message": "is anything currently using this or will be using this?",
      "range": {
        "startLine": 89,
        "startChar": 1,
        "endLine": 89,
        "endChar": 8
      },
      "revId": "354b4c6f9959831879cecf90ecf1892aa72bc373",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6dfefe9b_52826a1b",
        "filename": "src/mobile.init/BetaOptInPanel.js",
        "patchSetId": 2
      },
      "lineNbr": 89,
      "author": {
        "id": 2426
      },
      "writtenOn": "2019-03-26T16:27:35Z",
      "side": 1,
      "message": "No, I was thinking there might be more complex components that have interactions with other parts of the system and this was the minimal demo of that. For example, a list component might expose an add item method that is called when a response containing new items is received. Does that make sense?",
      "parentUuid": "53600b9c_9160ccf4",
      "range": {
        "startLine": 89,
        "startChar": 1,
        "endLine": 89,
        "endChar": 8
      },
      "revId": "354b4c6f9959831879cecf90ecf1892aa72bc373",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6f33d69b_b118d2a3",
        "filename": "src/mobile.init/BetaOptInPanel.js",
        "patchSetId": 2
      },
      "lineNbr": 89,
      "author": {
        "id": 2426
      },
      "writtenOn": "2019-03-30T21:05:29Z",
      "side": 1,
      "message": "I don\u0027t think it would be any harder but is this approach to components any easier to test?",
      "parentUuid": "6dfefe9b_52826a1b",
      "range": {
        "startLine": 89,
        "startChar": 1,
        "endLine": 89,
        "endChar": 8
      },
      "revId": "354b4c6f9959831879cecf90ecf1892aa72bc373",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e81a0f4f_bf838f15",
        "filename": "src/mobile.init/BetaOptInPanel.js",
        "patchSetId": 2
      },
      "lineNbr": 94,
      "author": {
        "id": 2426
      },
      "writtenOn": "2019-03-22T22:05:28Z",
      "side": 1,
      "message": "Common functionality between .bind and the \"smart\" component has to be isolated from class state so that it can be shared (.bind is static). Button which isn\u0027t smart looks cleaner.",
      "range": {
        "startLine": 94,
        "startChar": 9,
        "endLine": 94,
        "endChar": 16
      },
      "revId": "354b4c6f9959831879cecf90ecf1892aa72bc373",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5b1ef621_5c54f1d4",
        "filename": "src/mobile.startup/components/ComponentUtil.js",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 6176
      },
      "writtenOn": "2019-03-26T16:08:14Z",
      "side": 1,
      "message": "what does the ? mean?",
      "range": {
        "startLine": 7,
        "startChar": 12,
        "endLine": 7,
        "endChar": 19
      },
      "revId": "354b4c6f9959831879cecf90ecf1892aa72bc373",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "42bc200f_d5cd2efa",
        "filename": "src/mobile.startup/components/ComponentUtil.js",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 2426
      },
      "writtenOn": "2019-03-26T16:27:35Z",
      "side": 1,
      "message": "Nullable. The docs for JSDoc are ironically terrible but this is documented here: http://usejsdoc.org/tags-type.html.\n\nMaybe you\u0027re hinting at the underlying bug though. Passing anything but a string is probably an error and the type should be just `{string}` or default to `\u0027\u0027`.\n\n\nhttps://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML\nhttps://developer.mozilla.org/en-US/docs/Web/API/DOMString",
      "parentUuid": "5b1ef621_5c54f1d4",
      "range": {
        "startLine": 7,
        "startChar": 12,
        "endLine": 7,
        "endChar": 19
      },
      "revId": "354b4c6f9959831879cecf90ecf1892aa72bc373",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    }
  ]
}