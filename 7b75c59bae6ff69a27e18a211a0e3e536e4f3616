{
  "comments": [
    {
      "key": {
        "uuid": "ef573aee_03f05a2d",
        "filename": "src/mobile.init/components/BetaOptIn.js",
        "patchSetId": 6
      },
      "lineNbr": 20,
      "author": {
        "id": 94
      },
      "writtenOn": "2019-03-29T15:25:09Z",
      "side": 1,
      "message": "I think we need an interface e.g. BaseView  and this should be something that implements that (as would the existing View class). the reason I say is this is going to cause type problems when we use this in place of a View and the parameter passed is expected to be a View.\n\nFor example, this new View like thing is compatible with Overlay.make but Overlay.make\u0027s function signature will not accept it.",
      "revId": "7b75c59bae6ff69a27e18a211a0e3e536e4f3616",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "21864773_e566d019",
        "filename": "src/mobile.init/components/BetaOptIn.js",
        "patchSetId": 6
      },
      "lineNbr": 20,
      "author": {
        "id": 2426
      },
      "writtenOn": "2019-03-29T16:05:43Z",
      "side": 1,
      "message": "Revised. I\u0027ve added a new JSDoc interface, \"Component\", which BetaOptIn implements. Component seemed like a more appropriate name for the responsibilities of the parts we compose but let me know if you disagree.\n\nThe interface itself is pretty light right now, just .element. If we take apart Button, we can support more composition options that will probably appear in the interface like .renderToString() and .bind().\n\nTypeScript\u0027s JSDoc support for interfaces is lacking so in editor completion of the new interface is lousy. If you have ideas on how to improve type sharing across files in MobileFrontend, I\u0027m very interested. WRT more generally sharing types across files, I think we have more options if we\u0027re willing to use type-only declaration files (.d.ts) and I\u0027d be quite eager in making those contributions if they would be well received. Some past discussion here:\n\n https://gerrit.wikimedia.org/r/#/c/482251/4/src/mobile.languages.structured/util.js@14\n https://github.com/Microsoft/TypeScript/issues/14377\n https://github.com/Microsoft/TypeScript/issues/30156",
      "parentUuid": "ef573aee_03f05a2d",
      "revId": "7b75c59bae6ff69a27e18a211a0e3e536e4f3616",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6fe7f650_a2fef0d2",
        "filename": "src/mobile.init/components/BetaOptIn.js",
        "patchSetId": 6
      },
      "lineNbr": 25,
      "author": {
        "id": 94
      },
      "writtenOn": "2019-03-29T16:07:03Z",
      "side": 1,
      "message": "I\u0027m aware of the desire to move away from jQuery, but I\u0027m struggling to understand the motives and the urgency.\n\nIn this case, what benefit this utility is giving us that util.parseHTML(html)[0] doesn\u0027t?\n\nPersonally I\u0027d much rather write the latter given\n* brevity\n* less likely to make mistakes (DOM quirks are a pain)\n* jQuery is essentially baked into MobileFrontend/mediawiki and not going away any time soon (years) \n* it keeps our DOM creation methods centralises in a util function\n\nDe-centralising this DOM creation concerns me.\n\nRight now, I\u0027m pretty optimistic about rewriting View\u0027s render method to use React/Vue.js right now as it\u0027s well defined and prevents View\u0027s from doing any DOM manipulation outside the View class (note the View.append function). Likewise, I can rewrite util.parse to return a React component rather than a jQuery Element if I wanted/needed to. However, this pattern would make that tricky and require multiple changes over multiple files.\n\nI honestly think we\u0027d all benefit from sitting down, deciding on what framework we\u0027re heading towards and writing out a migration path before  making decisions such as use native DOM methods. I realise my own migration path is mostly in my head (and based on some unmade decisions) and I should spend some time today, writing it down.",
      "revId": "7b75c59bae6ff69a27e18a211a0e3e536e4f3616",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f6b5059e_562a042a",
        "filename": "src/mobile.startup/components/ComponentUtil.js",
        "patchSetId": 6
      },
      "lineNbr": 13,
      "author": {
        "id": 94
      },
      "writtenOn": "2019-03-29T16:07:03Z",
      "side": 1,
      "message": "children or childNodes?\n\nchildNodes has much better support off the top of my head and includes text nodes which seems important and should be noted if you don\u0027t plan to support that.\n\nFrom what I can see you are just using this to convert HTML to a DOMElement and get its firstChild, so a helper function (not class) along those lines would make more sense to me. Is this the intention?\n\nThis is essentially the existing util.parseHTML function (but less powerful).",
      "revId": "7b75c59bae6ff69a27e18a211a0e3e536e4f3616",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    }
  ]
}