{
  "comments": [
    {
      "key": {
        "uuid": "e1e39368_7e49cefa",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 25,
      "author": {
        "id": 2426
      },
      "writtenOn": "2019-01-23T19:51:48Z",
      "side": 1,
      "message": "Very nice description. Does the readme need to be updated?",
      "range": {
        "startLine": 15,
        "startChar": 0,
        "endLine": 25,
        "endChar": 3
      },
      "revId": "c0690185a8d75cf49f7dd08b471d030aed3a71ab",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "65f375a4_03e2428f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 25,
      "author": {
        "id": 94
      },
      "writtenOn": "2019-01-24T23:54:34Z",
      "side": 1,
      "message": "I don\u0027t think so... or at least I\u0027m not sure how.\n\nEach config flag e.g. $wgMFExpandAllSectionsUserOption could be updated to include the amc flag pointing to false.\n\nIn JSDoc I\u0027d make a typedef for this kind of thing, but we don\u0027t have an equivalent in PHP right?\n\nWe could of course update each default to explicitly put amc false but that would require changes in mediawki-config as well for little gain.",
      "parentUuid": "e1e39368_7e49cefa",
      "range": {
        "startLine": 15,
        "startChar": 0,
        "endLine": 25,
        "endChar": 3
      },
      "revId": "c0690185a8d75cf49f7dd08b471d030aed3a71ab",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "79ad4636_b4ef5363",
        "filename": "includes/ServiceWiring.php",
        "patchSetId": 6
      },
      "lineNbr": 12,
      "author": {
        "id": 2426
      },
      "writtenOn": "2019-01-23T19:51:48Z",
      "side": 1,
      "message": "Do we want to expose all user modes? I thought the FeatureManager was used to report this information.",
      "range": {
        "startLine": 12,
        "startChar": 2,
        "endLine": 12,
        "endChar": 26
      },
      "revId": "c0690185a8d75cf49f7dd08b471d030aed3a71ab",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "36a7a021_fb3f9e4d",
        "filename": "includes/ServiceWiring.php",
        "patchSetId": 6
      },
      "lineNbr": 12,
      "author": {
        "id": 3945
      },
      "writtenOn": "2019-01-24T10:47:09Z",
      "side": 1,
      "message": "It doesn\u0027t hurt us to expose this via Services, if any extensions wants to register it\u0027s own Mode -\u003e this is the service they need to retrieve and call `-\u003eregisterMode( new MyMode() );`",
      "parentUuid": "79ad4636_b4ef5363",
      "range": {
        "startLine": 12,
        "startChar": 2,
        "endLine": 12,
        "endChar": 26
      },
      "revId": "c0690185a8d75cf49f7dd08b471d030aed3a71ab",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cb088177_d2f0a7ab",
        "filename": "includes/ServiceWiring.php",
        "patchSetId": 6
      },
      "lineNbr": 23,
      "author": {
        "id": 2426
      },
      "writtenOn": "2019-01-23T19:51:48Z",
      "side": 1,
      "message": "This adds to my comment in SpecialMobileOptions. Since feature manager has modes, why can\u0027t it associate them with IFeature::CONFIG_BETA when a client goes to check availability?",
      "range": {
        "startLine": 23,
        "startChar": 34,
        "endLine": 23,
        "endChar": 44
      },
      "revId": "c0690185a8d75cf49f7dd08b471d030aed3a71ab",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "db90188a_5a4e6010",
        "filename": "includes/amc/UserMode.php",
        "patchSetId": 6
      },
      "lineNbr": 7,
      "author": {
        "id": 2426
      },
      "writtenOn": "2019-01-23T19:51:48Z",
      "side": 1,
      "message": "I\u0027m not sure but we may wish to keep platform use statements, \\DeferredUpdates and \\RuntimeException, grouped.",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 22
      },
      "revId": "c0690185a8d75cf49f7dd08b471d030aed3a71ab",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "961ed473_f6aa4b99",
        "filename": "includes/amc/UserMode.php",
        "patchSetId": 6
      },
      "lineNbr": 69,
      "author": {
        "id": 1196
      },
      "writtenOn": "2019-01-24T12:47:39Z",
      "side": 1,
      "message": "Is this assertion in the wrong place? You\u0027re relying on the ability to cast the value to a boolean on L65 above.",
      "revId": "c0690185a8d75cf49f7dd08b471d030aed3a71ab",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7b942419_270a8f73",
        "filename": "includes/features/BetaUserMode.php",
        "patchSetId": 6
      },
      "lineNbr": 43,
      "author": {
        "id": 2426
      },
      "writtenOn": "2019-01-23T19:51:48Z",
      "side": 1,
      "message": "Missing detail.",
      "range": {
        "startLine": 43,
        "startChar": 11,
        "endLine": 43,
        "endChar": 14
      },
      "revId": "c0690185a8d75cf49f7dd08b471d030aed3a71ab",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f85f486c_5d6701ad",
        "filename": "includes/features/BetaUserMode.php",
        "patchSetId": 6
      },
      "lineNbr": 44,
      "author": {
        "id": 2426
      },
      "writtenOn": "2019-01-23T19:51:48Z",
      "side": 1,
      "message": "Will this be implemented? If this won\u0027t be implemented and doesn\u0027t actually need to be enabled, maybe we should \"do nothing\" instead?",
      "range": {
        "startLine": 44,
        "startChar": 38,
        "endLine": 44,
        "endChar": 53
      },
      "revId": "c0690185a8d75cf49f7dd08b471d030aed3a71ab",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dd8365be_ff7551ea",
        "filename": "includes/features/BetaUserMode.php",
        "patchSetId": 6
      },
      "lineNbr": 44,
      "author": {
        "id": 3945
      },
      "writtenOn": "2019-01-24T10:47:09Z",
      "side": 1,
      "message": "those classes are temporary classes, I\u0027ll refactor those properly during T212802, for now I need an \"adapter\" that will provide old beta/stable mode information in the new system. That\u0027s why it\u0027s marked as \n This class provides read-only state",
      "parentUuid": "f85f486c_5d6701ad",
      "range": {
        "startLine": 44,
        "startChar": 38,
        "endLine": 44,
        "endChar": 53
      },
      "revId": "c0690185a8d75cf49f7dd08b471d030aed3a71ab",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b94a0000_145416b9",
        "filename": "includes/features/BetaUserMode.php",
        "patchSetId": 6
      },
      "lineNbr": 44,
      "author": {
        "id": 94
      },
      "writtenOn": "2019-01-24T23:54:34Z",
      "side": 1,
      "message": "Can we omit this in the mean time to avoid confusion?",
      "parentUuid": "dd8365be_ff7551ea",
      "range": {
        "startLine": 44,
        "startChar": 38,
        "endLine": 44,
        "endChar": 53
      },
      "revId": "c0690185a8d75cf49f7dd08b471d030aed3a71ab",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cc2657a3_3ca11684",
        "filename": "includes/features/FeaturesManager.php",
        "patchSetId": 6
      },
      "lineNbr": 81,
      "author": {
        "id": 2426
      },
      "writtenOn": "2019-01-23T19:51:48Z",
      "side": 1,
      "message": "Should this be IFeature?",
      "range": {
        "startLine": 81,
        "startChar": 11,
        "endLine": 81,
        "endChar": 17
      },
      "revId": "c0690185a8d75cf49f7dd08b471d030aed3a71ab",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0ea60956_53b5a506",
        "filename": "includes/features/FeaturesManager.php",
        "patchSetId": 6
      },
      "lineNbr": 81,
      "author": {
        "id": 3945
      },
      "writtenOn": "2019-01-24T10:47:09Z",
      "side": 1,
      "message": "nope, this retrieves IFeature object. You pass the feature identifier (identifier gets passed when you register a feature), this is used to retrieve single feature.",
      "parentUuid": "cc2657a3_3ca11684",
      "range": {
        "startLine": 81,
        "startChar": 11,
        "endLine": 81,
        "endChar": 17
      },
      "revId": "c0690185a8d75cf49f7dd08b471d030aed3a71ab",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "88a26f14_61162f8f",
        "filename": "includes/features/FeaturesManager.php",
        "patchSetId": 6
      },
      "lineNbr": 106,
      "author": {
        "id": 1196
      },
      "writtenOn": "2019-01-24T12:47:39Z",
      "side": 1,
      "message": "Does it strike you as odd that this function never once gets or uses a User object representing the current user? Instead, it relies on the knowledge that all UserMode objects are constructed with the User object that represents the current user (although they could represent ANY user).\n\nSee my general comment for more thoughts on this.",
      "range": {
        "startLine": 98,
        "startChar": 0,
        "endLine": 106,
        "endChar": 15
      },
      "revId": "c0690185a8d75cf49f7dd08b471d030aed3a71ab",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "904dd47a_d50ab5d4",
        "filename": "includes/features/FeaturesManager.php",
        "patchSetId": 6
      },
      "lineNbr": 120,
      "author": {
        "id": 1196
      },
      "writtenOn": "2019-01-24T12:47:39Z",
      "side": 1,
      "message": "Should this function be removed?",
      "range": {
        "startLine": 109,
        "startChar": 0,
        "endLine": 120,
        "endChar": 2
      },
      "revId": "c0690185a8d75cf49f7dd08b471d030aed3a71ab",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bf3d2f8c_2dcbe705",
        "filename": "includes/features/StableUserMode.php",
        "patchSetId": 6
      },
      "lineNbr": 44,
      "author": {
        "id": 2426
      },
      "writtenOn": "2019-01-23T19:51:48Z",
      "side": 1,
      "message": "Should we do nothing when $this-\u003eisEnabled() \u003d\u003d\u003d $isEnabled?",
      "range": {
        "startLine": 44,
        "startChar": 2,
        "endLine": 44,
        "endChar": 57
      },
      "revId": "c0690185a8d75cf49f7dd08b471d030aed3a71ab",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9cee43ac_306bf8c4",
        "filename": "includes/features/StableUserMode.php",
        "patchSetId": 6
      },
      "lineNbr": 44,
      "author": {
        "id": 3945
      },
      "writtenOn": "2019-01-24T10:47:09Z",
      "side": 1,
      "message": "those classes are temporary classes, I\u0027ll refactor those properly during T212802, for now I need an \"adapter\" that will provide old beta/stable mode information in the new system. That\u0027s why it\u0027s marked as \n\n This class provides read-only state",
      "parentUuid": "bf3d2f8c_2dcbe705",
      "range": {
        "startLine": 44,
        "startChar": 2,
        "endLine": 44,
        "endChar": 57
      },
      "revId": "c0690185a8d75cf49f7dd08b471d030aed3a71ab",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "49c05560_e0098ebf",
        "filename": "includes/features/UserModes.php",
        "patchSetId": 6
      },
      "lineNbr": 20,
      "author": {
        "id": 2426
      },
      "writtenOn": "2019-01-23T19:51:48Z",
      "side": 1,
      "message": "Should we initialize this or does ArrayIterator handle null $modes?",
      "range": {
        "startLine": 20,
        "startChar": 9,
        "endLine": 20,
        "endChar": 16
      },
      "revId": "c0690185a8d75cf49f7dd08b471d030aed3a71ab",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4f360bc3_ee0db0ec",
        "filename": "includes/features/UserModes.php",
        "patchSetId": 6
      },
      "lineNbr": 20,
      "author": {
        "id": 3945
      },
      "writtenOn": "2019-01-24T10:47:09Z",
      "side": 1,
      "message": "I think (I\u0027m 99% sure), that null is silently casts to an empty array. But initializing this as empty array is a good practice, I\u0027ll do it.",
      "parentUuid": "49c05560_e0098ebf",
      "range": {
        "startLine": 20,
        "startChar": 9,
        "endLine": 20,
        "endChar": 16
      },
      "revId": "c0690185a8d75cf49f7dd08b471d030aed3a71ab",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "86fd2827_676c874f",
        "filename": "includes/features/UserModes.php",
        "patchSetId": 6
      },
      "lineNbr": 31,
      "author": {
        "id": 2426
      },
      "writtenOn": "2019-01-23T19:51:48Z",
      "side": 1,
      "message": "Isn\u0027t Traversable implied by ArrayIterator?",
      "range": {
        "startLine": 31,
        "startChar": 12,
        "endLine": 31,
        "endChar": 37
      },
      "revId": "c0690185a8d75cf49f7dd08b471d030aed3a71ab",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ceb0846d_b1aa9fcb",
        "filename": "includes/features/UserModes.php",
        "patchSetId": 6
      },
      "lineNbr": 31,
      "author": {
        "id": 3945
      },
      "writtenOn": "2019-01-24T10:47:09Z",
      "side": 1,
      "message": "Good catch, that\u0027s correct. That was automatically added by PHPStorm and I didn\u0027t notice it. I\u0027ll fix it",
      "parentUuid": "86fd2827_676c874f",
      "range": {
        "startLine": 31,
        "startChar": 12,
        "endLine": 31,
        "endChar": 37
      },
      "revId": "c0690185a8d75cf49f7dd08b471d030aed3a71ab",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    }
  ]
}