{
  "comments": [
    {
      "key": {
        "uuid": "ce38dbff_b15d034d",
        "filename": "resources/mobile.references.gateway.htmlScraper/ReferencesGateway.js",
        "patchSetId": 18
      },
      "lineNbr": 22,
      "author": {
        "id": 1196
      },
      "writtenOn": "2016-04-14T09:45:25Z",
      "side": 1,
      "message": "I think I understand what this comment is trying to say but, nevertheless, it\u0027s confusing as both jQuery#find and string concatenation are being used.",
      "revId": "dde292930ed46143fb424a80b6bfb1031b6689fd",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ce38dbff_314a9385",
        "filename": "resources/mobile.references.gateway.htmlScraper/ReferencesGateway.js",
        "patchSetId": 18
      },
      "lineNbr": 30,
      "author": {
        "id": 1196
      },
      "writtenOn": "2016-04-14T09:45:25Z",
      "side": 1,
      "message": "Again, return $.Deferred().resolve( /* value */ ).promise();",
      "revId": "dde292930ed46143fb424a80b6bfb1031b6689fd",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ce38dbff_f17e6be0",
        "filename": "resources/mobile.references.gateway.mobileView/ReferencesGateway.js",
        "patchSetId": 18
      },
      "lineNbr": 30,
      "author": {
        "id": 1196
      },
      "writtenOn": "2016-04-14T09:45:25Z",
      "side": 1,
      "message": "This returns the deferred object (of type jQuery.Deferred). This should be\n\n    return $.Deferred().resolve( self.$references ).promise();",
      "revId": "dde292930ed46143fb424a80b6bfb1031b6689fd",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ce38dbff_11630f3c",
        "filename": "resources/mobile.references.gateway.mobileView/ReferencesGateway.js",
        "patchSetId": 18
      },
      "lineNbr": 62,
      "author": {
        "id": 1196
      },
      "writtenOn": "2016-04-14T09:45:25Z",
      "side": 1,
      "message": "This pattern is known as the Explicit Construction Anti-pattern, which you can read more about here: http://bluebirdjs.com/docs/anti-patterns.html#the-explicit-construction-anti-pattern.\n\nYou can simply return the result of jQuery.Promise#done on L64.",
      "revId": "dde292930ed46143fb424a80b6bfb1031b6689fd",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ce38dbff_f1c4ab13",
        "filename": "resources/mobile.references.gateway.mobileView/ReferencesGateway.js",
        "patchSetId": 18
      },
      "lineNbr": 64,
      "author": {
        "id": 1196
      },
      "writtenOn": "2016-04-14T09:45:25Z",
      "side": 1,
      "message": "If you return an instance of jQuery.Promise from inside of a handler passed to jQuery.Promise#then, you don\u0027t have bind #done and #fail to the explicitly constructed deferred object above. See the deferred#then docs \u003chttps://api.jquery.com/deferred.then/\u003e for examples of this.",
      "revId": "dde292930ed46143fb424a80b6bfb1031b6689fd",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ce38dbff_31cf332f",
        "filename": "resources/mobile.references.gateway.mobileView/ReferencesGateway.js",
        "patchSetId": 18
      },
      "lineNbr": 73,
      "author": {
        "id": 1196
      },
      "writtenOn": "2016-04-14T09:45:25Z",
      "side": 1,
      "message": "These calls to $.proxy can be removed per the above.",
      "revId": "dde292930ed46143fb424a80b6bfb1031b6689fd",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ce38dbff_51d3d7d6",
        "filename": "resources/mobile.references.gateway/ReferencesGateway.js",
        "patchSetId": 18
      },
      "lineNbr": 35,
      "author": {
        "id": 1196
      },
      "writtenOn": "2016-04-14T09:45:25Z",
      "side": 1,
      "message": "You mean jQuery.Promise here, right?",
      "revId": "dde292930ed46143fb424a80b6bfb1031b6689fd",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ce38dbff_3424415b",
        "filename": "resources/mobile.references/ReferencesDrawer.js",
        "patchSetId": 18
      },
      "lineNbr": 89,
      "author": {
        "id": 1196
      },
      "writtenOn": "2016-04-14T11:00:12Z",
      "side": 1,
      "message": "There\u0027s a race condition here: if the user clicks one reference and then another in quick succession, the gateway may have issued multiple requests that will race, resulting in one reference showing followed by another, possibly out of order.\n\nPromises returned by mw.Api#get – #ajax under the hood – can be aborted. Elsewhere in the MobileFrontend codebase, we store the last promise returned by a call to mw.Api#ajax and abort it if another is required. I suggest that you follow that pattern here.\n\nI\u0027d note that this only increases the complexity of the ReferencesDrawer class.",
      "revId": "dde292930ed46143fb424a80b6bfb1031b6689fd",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ce38dbff_f11dcb79",
        "filename": "tests/qunit/mobile.references.gateway.htmlScraper/test_ReferencesGateway.js",
        "patchSetId": 18
      },
      "lineNbr": 17,
      "author": {
        "id": 1196
      },
      "writtenOn": "2016-04-14T09:45:25Z",
      "side": 1,
      "message": "Does this line really affect the outcome of the tests?",
      "revId": "dde292930ed46143fb424a80b6bfb1031b6689fd",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ce38dbff_74108953",
        "filename": "tests/qunit/mobile.references.gateway.htmlScraper/test_ReferencesGateway.js",
        "patchSetId": 18
      },
      "lineNbr": 22,
      "author": {
        "id": 1196
      },
      "writtenOn": "2016-04-14T09:45:25Z",
      "side": 1,
      "message": "This test and the test below should be asynchronous tests as promises are being used. That the promises resolve immediately is an implementation detail.\n\nQUnit has a fairly trivial migration path to make a synchronous test asynchronous: http://api.qunitjs.com/async/.",
      "revId": "dde292930ed46143fb424a80b6bfb1031b6689fd",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ce38dbff_f44ad95d",
        "filename": "tests/qunit/mobile.references.gateway.mobileView/test_ReferencesGateway.js",
        "patchSetId": 18
      },
      "lineNbr": 1,
      "author": {
        "id": 1196
      },
      "writtenOn": "2016-04-14T09:45:25Z",
      "side": 1,
      "message": "There\u0027s a couple of missing tests, which all rely on not stubbing the behaviour of ReferencesMobileViewGateway#getReferencesElements all the time:\n\n* What happens when #getReferencesElements rejects?\n* What happens when #getReferencesElements resolves with a empty list of references (for whatever reason)?\n\nWriting these tests will allow you to demonstrate that removing the explicitly constructed deferred object was successful.\n\nRed. Green. Refactor.",
      "revId": "dde292930ed46143fb424a80b6bfb1031b6689fd",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ce38dbff_341e0164",
        "filename": "tests/qunit/mobile.references.gateway.mobileView/test_ReferencesGateway.js",
        "patchSetId": 18
      },
      "lineNbr": 27,
      "author": {
        "id": 1196
      },
      "writtenOn": "2016-04-14T09:45:25Z",
      "side": 1,
      "message": "Missing call to jQuery.Deferred#promise.",
      "revId": "dde292930ed46143fb424a80b6bfb1031b6689fd",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    }
  ]
}