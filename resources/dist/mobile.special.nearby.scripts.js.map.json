{"version":3,"sources":["webpack://mfModules.[name]/./src/mobile.special.nearby.scripts/LocationProvider.js","webpack://mfModules.[name]/./src/mobile.special.nearby.scripts/NearbyGateway.js","webpack://mfModules.[name]/./src/mobile.special.nearby.scripts/mobile.special.nearby.scripts.js","webpack://mfModules.[name]/./src/mobile.special.nearby.scripts/nearbyErrorMessage.js"],"names":["LocationProvider","browser","require","getSingleton","util","isAvailable","supportsGeoLocation","getCurrentPosition","result","Deferred","navigator","geolocation","geo","resolve","latitude","coords","longitude","err","error","code","PERMISSION_DENIED","TIMEOUT","POSITION_UNAVAILABLE","reject","timeout","enableHighAccuracy","module","exports","pageJSONParser","ns","mw","config","get","extendSearchParams","NearbyGateway","options","this","api","prototype","_distanceMessage","d","Math","ceil","msg","language","convertNumber","toFixed","getPages","range","exclude","_search","ggscoord","getPagesAroundPage","page","ggspage","params","requestParams","self","colimit","prop","generator","ggsradius","ggsnamespace","ggslimit","codistancefrompoint","codistancefrompage","ajax","then","resp","pages","query","map","i","p","parse","anchor","coordinates","dist","lat","lon","proximity","title","filter","sort","a","b","length","Api","nearbyErrorMessage","promisedView","router","loader","$nearby","$","WatchstarPageList","$infoContainer","nearbyGateway","render","view","$container","hide","removeClass","empty","append","$el","show","nearbyPageList","errorType","on","getPath","route","pageTitle","Uri","decode","catch","checkRoute","navigateTo","path","MessageBox","nearbyErrors","permission","hasHeading","location","heading","http","incompatible","key","message","extend","className"],"mappings":"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","file":"mobile.special.nearby.scripts.js","sourcesContent":["var LocationProvider,\n\tbrowser = require( '../mobile.startup/Browser' ).getSingleton(),\n\tutil = require( '../mobile.startup/util' );\n\n/**\n * API for retrieving location from user device\n *\n * @class LocationProvider\n */\nLocationProvider = {\n\t/**\n\t * Detect if browser supports geolocation\n\t *\n\t * @memberof LocationProvider\n\t * @instance\n\t * @return {boolean}\n\t */\n\tisAvailable: function () {\n\t\treturn browser.supportsGeoLocation();\n\t},\n\n\t/**\n\t * Obtain users current location and return a deferred object with the\n\t * longitude and latitude values\n\t * Resolve return object with 'incompatible' if browser doesn't support geo location\n\t *\n\t * @memberof LocationProvider\n\t * @instance\n\t * @return {jQuery.Deferred}\n\t */\n\tgetCurrentPosition: function () {\n\t\tvar result = util.Deferred();\n\t\tif ( LocationProvider.isAvailable() ) {\n\t\t\tnavigator.geolocation.getCurrentPosition(\n\t\t\t\tfunction ( geo ) {\n\t\t\t\t\tresult.resolve( {\n\t\t\t\t\t\tlatitude: geo.coords.latitude,\n\t\t\t\t\t\tlongitude: geo.coords.longitude\n\t\t\t\t\t} );\n\t\t\t\t},\n\t\t\t\tfunction ( err ) {\n\t\t\t\t\tvar error;\n\t\t\t\t\tswitch ( err.code ) {\n\t\t\t\t\t\tcase err.PERMISSION_DENIED:\n\t\t\t\t\t\t\terror = 'permission';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase err.TIMEOUT:\n\t\t\t\t\t\t\terror = 'timeout';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase err.POSITION_UNAVAILABLE:\n\t\t\t\t\t\t\terror = 'location';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\terror = 'unknown';\n\t\t\t\t\t}\n\t\t\t\t\tresult.reject( error );\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttimeout: 10000,\n\t\t\t\t\tenableHighAccuracy: true\n\t\t\t\t}\n\t\t\t);\n\t\t} else {\n\t\t\tresult.reject( 'incompatible' );\n\t\t}\n\t\treturn result;\n\t}\n};\n\nmodule.exports = LocationProvider;\n","var limit = 50,\n\tpageJSONParser = require( '../mobile.startup/page/pageJSONParser' ),\n\tns = mw.config.get( 'wgContentNamespaces' ),\n\tutil = require( '../mobile.startup/util' ),\n\textendSearchParams = require( '../mobile.startup/extendSearchParams' );\n\n/**\n * API for retrieving nearby pages\n *\n * @class NearbyGateway\n * @param {Object} options Configuration options\n * @param {mw.Api} options.api\n */\nfunction NearbyGateway( options ) {\n\tthis.api = options.api;\n}\n\nNearbyGateway.prototype = {\n\t/**\n\t * Returns a human readable string stating the distance in meters or kilometers\n\t * depending on size.\n\t *\n\t * @memberof NearbyGateway\n\t * @instance\n\t * @private\n\t * @param {number} d The distance in meters.\n\t * @return {string} message stating how far the user is from the point of interest.\n\t */\n\t_distanceMessage: function ( d ) {\n\t\tif ( d < 1 ) {\n\t\t\td *= 100;\n\t\t\td = Math.ceil( d ) * 10;\n\t\t\tif ( d === 1000 ) {\n\t\t\t\td = 1;\n\t\t\t} else {\n\t\t\t\treturn mw.msg( 'mobile-frontend-nearby-distance-meters', mw.language.convertNumber( d ) );\n\t\t\t}\n\t\t} else {\n\t\t\tif ( d > 2 ) {\n\t\t\t\td *= 10;\n\t\t\t\td = Math.ceil( d ) / 10;\n\t\t\t\td = d.toFixed( 1 );\n\t\t\t} else {\n\t\t\t\td *= 100;\n\t\t\t\td = Math.ceil( d ) / 100;\n\t\t\t\td = d.toFixed( 2 );\n\t\t\t}\n\t\t}\n\t\treturn mw.msg( 'mobile-frontend-nearby-distance', mw.language.convertNumber( d ) );\n\t},\n\t/**\n\t * Returns a list of pages around a given point\n\t *\n\t * @memberof NearbyGateway\n\t * @instance\n\t * @param {Object} coords In form { latitude: 0, longitude: 2 }\n\t * @param {number} range Number of meters to perform a geosearch for\n\t * @param {string} exclude Name of a title to exclude from the list of results\n\t * @return {jQuery.Deferred} Object taking list of pages as argument\n\t */\n\tgetPages: function ( coords, range, exclude ) {\n\t\treturn this._search( {\n\t\t\tggscoord: [ coords.latitude, coords.longitude ]\n\t\t}, range, exclude );\n\t},\n\n\t/**\n\t * Gets the pages around a page. It excludes itself from the search\n\t *\n\t * @memberof NearbyGateway\n\t * @instance\n\t * @param {string} page Page title like \"W_San_Francisco\"\n\t * @param {number} range Number of meters to perform a geosearch for\n\t * @return {jQuery.Deferred} Object taking list of pages as argument\n\t */\n\tgetPagesAroundPage: function ( page, range ) {\n\t\treturn this._search( {\n\t\t\tggspage: page\n\t\t}, range, page );\n\t},\n\n\t/**\n\t * Searches for pages nearby\n\t *\n\t * @memberof NearbyGateway\n\t * @instance\n\t * @private\n\t * @param {Object} params Parameters to use for searching\n\t * @param {number} range Number of meters to perform a geosearch for\n\t * @param {string} [exclude] Name of a title to exclude from the list of results\n\t * @return {jQuery.Deferred} Object taking list of pages as argument\n\t */\n\t_search: function ( params, range, exclude ) {\n\t\tvar requestParams,\n\t\t\td = util.Deferred(),\n\t\t\tself = this;\n\n\t\trequestParams = extendSearchParams( 'nearby', {\n\t\t\tcolimit: 'max',\n\t\t\tprop: [ 'coordinates' ],\n\t\t\tgenerator: 'geosearch',\n\t\t\tggsradius: range,\n\t\t\tggsnamespace: ns,\n\t\t\tggslimit: limit\n\t\t}, params );\n\n\t\tif ( params.ggscoord ) {\n\t\t\trequestParams.codistancefrompoint = params.ggscoord;\n\t\t} else if ( params.ggspage ) {\n\t\t\trequestParams.codistancefrompage = params.ggspage;\n\t\t}\n\n\t\tthis.api.ajax( requestParams ).then( function ( resp ) {\n\t\t\tvar pages;\n\n\t\t\t// resp.query.pages is an Array<Page> instead of a map like in other\n\t\t\t// API requests\n\t\t\tif ( resp.query ) {\n\t\t\t\tpages = resp.query.pages || [];\n\t\t\t} else {\n\t\t\t\tpages = [];\n\t\t\t}\n\n\t\t\tpages = pages.map( function ( page, i ) {\n\t\t\t\tvar coords, p;\n\t\t\t\tp = pageJSONParser.parse( page );\n\t\t\t\tp.anchor = 'item_' + i;\n\n\t\t\t\t// protect against declined bug T49133\n\t\t\t\tif ( page.coordinates ) {\n\t\t\t\t\tcoords = page.coordinates[0];\n\t\t\t\t\t// FIXME: Make part of the Page object\n\t\t\t\t\tp.dist = coords.dist / 1000;\n\t\t\t\t\tp.latitude = coords.lat;\n\t\t\t\t\tp.longitude = coords.lon;\n\t\t\t\t\tp.proximity = self._distanceMessage( p.dist );\n\t\t\t\t} else {\n\t\t\t\t\tp.dist = 0;\n\t\t\t\t}\n\t\t\t\tif ( exclude !== page.title ) {\n\t\t\t\t\treturn p;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t} ).filter( function ( page ) { return !!page; } );\n\n\t\t\tpages.sort( function ( a, b ) {\n\t\t\t\treturn a.dist > b.dist ? 1 : -1;\n\t\t\t} );\n\t\t\tif ( pages.length === 0 ) {\n\t\t\t\td.reject( 'empty' );\n\t\t\t} else {\n\t\t\t\td.resolve( pages );\n\t\t\t}\n\t\t}, function ( error ) {\n\t\t\td.reject( error );\n\t\t} );\n\t\treturn d;\n\t}\n};\n\nmodule.exports = NearbyGateway;\n","/* global $ */\nvar\n\tapi = new mw.Api(),\n\tnearbyErrorMessage = require( './nearbyErrorMessage' ),\n\tLocationProvider = require( './LocationProvider' ),\n\trange = mw.config.get( 'wgMFNearbyRange' ) || 1000,\n\tpromisedView = require( './../mobile.startup/promisedView' ),\n\trouter = mw.loader.require( 'mediawiki.router' ),\n\t$nearby = $( '#mw-mf-nearby' ),\n\tWatchstarPageList = require( '../mobile.startup/watchstar/WatchstarPageList' ),\n\t$infoContainer = $( '#mf-nearby-info-holder' ),\n\tNearbyGateway = require( './NearbyGateway' ),\n\tnearbyGateway = new NearbyGateway( { api } );\n\n/**\n * Show the title and hide the info container\n */\nfunction hideInitialScreen() {\n\t$infoContainer.hide();\n\t$( 'body' ).removeClass( 'nearby-accept-pending' );\n}\n\n/**\n * @param {View} view to render\n * @param {jQuery.Object} $container where to render\n */\nfunction render( view, $container ) {\n\thideInitialScreen();\n\t$container.empty().append( view.$el ).show();\n}\n\nrouter.on( 'hashchange', function () {\n\tif ( router.getPath() === '' ) {\n\t\t$infoContainer.show();\n\t\t$nearby.hide();\n\t} else {\n\t\t$infoContainer.hide();\n\t\t$nearby.show();\n\t}\n} );\n\n/**\n * @param {number} latitude\n * @param {number} longitude\n * @return {View} that will resolve to a WatchstarPageList or the result of nearbyErrorMessage\n */\nfunction nearbyPageList( latitude, longitude ) {\n\tconst coordinates = {\n\t\tlatitude,\n\t\tlongitude\n\t};\n\treturn promisedView(\n\t\tnearbyGateway.getPages( coordinates, range ).then( function ( pages ) {\n\t\t\treturn new WatchstarPageList( {\n\t\t\t\tpages,\n\t\t\t\tapi\n\t\t\t} );\n\t\t}, function ( errorType ) {\n\t\t\treturn nearbyErrorMessage( errorType );\n\t\t} )\n\t);\n}\n/*\n * #/coords/lat,long\n */\nrouter.route( /^\\/coord\\/(-?\\d+(?:\\.\\d+)?),(-?\\d+(?:\\.\\d+)?)/, function ( latitude, longitude ) {\n\trender( nearbyPageList( latitude, longitude ), $nearby );\n} );\n\n/*\n * #/page/PageTitle\n */\nrouter.route( /^\\/page\\/(.+)$/, function ( pageTitle ) {\n\tconst view = promisedView(\n\t\tnearbyGateway.getPagesAroundPage( mw.Uri.decode( pageTitle ), range )\n\t\t\t.then( function ( pages ) {\n\t\t\t\treturn new WatchstarPageList( {\n\t\t\t\t\tpages,\n\t\t\t\t\tapi\n\t\t\t\t} );\n\t\t\t} ).catch( function ( errorType ) {\n\t\t\t\treturn nearbyErrorMessage( errorType );\n\t\t\t} )\n\t);\n\trender( view, $nearby );\n} );\n\nrouter.checkRoute();\n$( function () {\n\t$( '#showArticles' ).prop( 'disabled', false ).on( 'click', function () {\n\t\tconst view = promisedView(\n\t\t\tLocationProvider.getCurrentPosition().then( function ( geo ) {\n\t\t\t\tconst { latitude, longitude } = geo;\n\t\t\t\trouter.navigateTo( null, { path: `#/coord/${latitude},${longitude}` } );\n\t\t\t\treturn nearbyPageList( latitude, longitude );\n\t\t\t} ).catch( function ( errorType ) {\n\t\t\t\treturn nearbyErrorMessage( errorType );\n\t\t\t} )\n\t\t);\n\t\trender( view, $nearby );\n\t} );\n} );\n","const util = require( '../mobile.startup/util' ),\n\tMessageBox = require( '../mobile.startup/MessageBox' ),\n\tnearbyErrors = {\n\t\tpermission: {\n\t\t\thasHeading: false,\n\t\t\tmsg: mw.msg( 'mobile-frontend-nearby-permission-denied' )\n\t\t},\n\t\tlocation: {\n\t\t\thasHeading: false,\n\t\t\tmsg: mw.msg( 'mobile-frontend-nearby-location-unavailable' )\n\t\t},\n\t\tempty: {\n\t\t\theading: mw.msg( 'mobile-frontend-nearby-noresults' ),\n\t\t\thasHeading: true,\n\t\t\tmsg: mw.msg( 'mobile-frontend-nearby-noresults-guidance' )\n\t\t},\n\t\thttp: {\n\t\t\theading: mw.msg( 'mobile-frontend-nearby-error' ),\n\t\t\thasHeading: true,\n\t\t\tmsg: mw.msg( 'mobile-frontend-nearby-error-guidance' )\n\t\t},\n\t\tincompatible: {\n\t\t\theading: mw.msg( 'mobile-frontend-nearby-requirements' ),\n\t\t\thasHeading: true,\n\t\t\tmsg: mw.msg( 'mobile-frontend-nearby-requirements-guidance' )\n\t\t}\n\t};\n\n/**\n * @param {string} key of the error that occurred.\n * @return {MessageBox} of a related error. If no match for error key, a generic HTTP error will\n * be displayed.\n */\nmodule.exports = function nearbyErrorMessage( key ) {\n\tvar message = nearbyErrors[ key ] || nearbyErrors.http;\n\n\treturn new MessageBox(\n\t\tutil.extend( {\n\t\t\tclassName: 'mw-message-box-error'\n\t\t}, message )\n\t);\n};\n"],"sourceRoot":""}