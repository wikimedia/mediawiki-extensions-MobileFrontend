{"version":3,"file":"mobile.special.mobileoptions.scripts.js","mappings":"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","sources":["webpack://mfModules/./node_modules/@wikimedia/mediawiki.skins.clientpreferences/clientPreferences.js","webpack://mfModules/./src/mobile.special.mobileoptions.scripts.js"],"sourcesContent":["/**\n * @typedef {Object} ClientPreference\n * @property {string[]} options that are valid for this client preference\n * @property {string} preferenceKey for registered users.\n * @property {string} [type] defaults to radio. Supported: radio, switch\n * @property {function} [callback] callback executed after a client preference has been modified.\n */\nlet /** @type {MwApi} */ api;\n/**\n * @typedef {Object} PreferenceOption\n * @property {string} label\n * @property {string} value\n *\n */\n\n/**\n * Get the list of client preferences that are active on the page, including hidden.\n *\n * @return {string[]} of active client preferences\n */\nfunction getClientPreferences() {\n\treturn Array.from( document.documentElement.classList ).filter(\n\t\t( className ) => className.match( /-clientpref-/ )\n\t).map( ( className ) => className.split( '-clientpref-' )[ 0 ] );\n}\n\n/**\n * Get the list of client preferences that are active on the page and not hidden.\n *\n * @param {Record<string,ClientPreference>} config\n * @return {string[]} of user facing client preferences\n */\nfunction getVisibleClientPreferences( config ) {\n\tconst active = getClientPreferences();\n\t// Order should be based on key in config.json\n\treturn Object.keys( config ).filter( ( key ) => active.indexOf( key ) > -1 );\n}\n\n/**\n * @param {string} featureName\n * @param {string} value\n * @param {Record<string,ClientPreference>} config\n */\nfunction toggleDocClassAndSave( featureName, value, config ) {\n\tconst pref = config[ featureName ];\n\tconst callback = pref.callback || ( () => {} );\n\tif ( mw.user.isNamed() ) {\n\t\t// FIXME: Ideally this would be done in mw.user.clientprefs API.\n\t\t// mw.user.clientPrefs.get is marked as being only stable for anonymous and temporary users.\n\t\t// So instead we have to keep track of all the different possible values and remove them\n\t\t// before adding the new class.\n\t\tconfig[ featureName ].options.forEach( ( possibleValue ) => {\n\t\t\tdocument.documentElement.classList.remove( `${ featureName }-clientpref-${ possibleValue }` );\n\t\t} );\n\t\tdocument.documentElement.classList.add( `${ featureName }-clientpref-${ value }` );\n\t\t// Ideally this should be taken care of via a single core helper function.\n\t\tmw.util.debounce( function () {\n\t\t\tapi = api || new mw.Api();\n\t\t\tapi.saveOption( pref.preferenceKey, value ).then( () => {\n\t\t\t\tcallback();\n\t\t\t} );\n\t\t}, 100 )();\n\t\t// END FIXME.\n\t} else {\n\t\t// This case is much simpler, the API transparently takes care of classes as well as storage.\n\t\tmw.user.clientPrefs.set( featureName, value );\n\t\tcallback();\n\t}\n}\n\n/**\n * @param {string} featureName\n * @param {string} value\n * @return {string}\n */\nconst getInputId = ( featureName, value ) => `skin-client-pref-${ featureName }-value-${ value }`;\n\n/**\n * @param {string} type\n * @param {string} featureName\n * @param {string} value\n * @return {HTMLInputElement}\n */\nfunction makeInputElement( type, featureName, value ) {\n\tconst input = document.createElement( 'input' );\n\tconst name = `skin-client-pref-${ featureName }-group`;\n\tconst id = getInputId( featureName, value );\n\tinput.name = name;\n\tinput.id = id;\n\tinput.type = type;\n\tif ( type === 'checkbox' ) {\n\t\tinput.checked = value === '1';\n\t} else {\n\t\tinput.value = value;\n\t}\n\tinput.setAttribute( 'data-event-name', id );\n\treturn input;\n}\n\n/**\n * @param {string} featureName\n * @param {string} value\n * @return {HTMLLabelElement}\n */\nfunction makeLabelElement( featureName, value ) {\n\tconst label = document.createElement( 'label' );\n\t// eslint-disable-next-line mediawiki/msg-doc\n\tlabel.textContent = mw.msg( `${ featureName }-${ value }-label` );\n\tlabel.setAttribute( 'for', getInputId( featureName, value ) );\n\treturn label;\n}\n\n/**\n * @param {Element} parent\n * @param {string} featureName\n * @param {string} value\n * @param {string} currentValue\n * @param {Record<string,ClientPreference>} config\n */\nfunction appendRadioToggle( parent, featureName, value, currentValue, config ) {\n\tconst input = makeInputElement( 'radio', featureName, value );\n\tinput.classList.add( 'cdx-radio__input' );\n\tif ( currentValue === value ) {\n\t\tinput.checked = true;\n\t}\n\tconst icon = document.createElement( 'span' );\n\ticon.classList.add( 'cdx-radio__icon' );\n\tconst label = makeLabelElement( featureName, value );\n\tlabel.classList.add( 'cdx-radio__label' );\n\tconst container = document.createElement( 'div' );\n\tcontainer.classList.add( 'cdx-radio' );\n\tcontainer.appendChild( input );\n\tcontainer.appendChild( icon );\n\tcontainer.appendChild( label );\n\tparent.appendChild( container );\n\tinput.addEventListener( 'change', () => {\n\t\ttoggleDocClassAndSave( featureName, value, config );\n\t} );\n}\n\n/**\n * @param {Element} form\n * @param {string} featureName\n * @param {HTMLElement} labelElement\n * @param {string} currentValue\n * @param {Record<string,ClientPreference>} config\n */\nfunction appendToggleSwitch( form, featureName, labelElement, currentValue, config ) {\n\tconst input = makeInputElement( 'checkbox', featureName, currentValue );\n\tinput.classList.add( 'cdx-toggle-switch__input' );\n\tconst switcher = document.createElement( 'span' );\n\tswitcher.classList.add( 'cdx-toggle-switch__switch' );\n\tconst grip = document.createElement( 'span' );\n\tgrip.classList.add( 'cdx-toggle-switch__switch__grip' );\n\tswitcher.appendChild( grip );\n\tconst label = labelElement || makeLabelElement( featureName, currentValue );\n\tlabel.classList.add( 'cdx-toggle-switch__label' );\n\tconst toggleSwitch = document.createElement( 'span' );\n\ttoggleSwitch.classList.add( 'cdx-toggle-switch' );\n\ttoggleSwitch.appendChild( input );\n\ttoggleSwitch.appendChild( switcher );\n\ttoggleSwitch.appendChild( label );\n\tinput.addEventListener( 'change', () => {\n\t\ttoggleDocClassAndSave( featureName, input.checked ? '1' : '0', config );\n\t} );\n\tform.appendChild( toggleSwitch );\n}\n\n/**\n * @param {string} className\n * @return {Element}\n */\nfunction createRow( className ) {\n\tconst row = document.createElement( 'div' );\n\trow.setAttribute( 'class', className );\n\treturn row;\n}\n\n/**\n * Get the label for the feature.\n *\n * @param {string} featureName\n * @return {MwMessage}\n */\nconst getFeatureLabelMsg = ( featureName ) =>\n\t// eslint-disable-next-line mediawiki/msg-doc\n\tmw.message( `${ featureName }-name` );\n\n/**\n * adds a toggle button\n *\n * @param {string} featureName\n * @param {Record<string,ClientPreference>} config\n * @return {Element|null}\n */\nfunction makeControl( featureName, config ) {\n\tconst pref = config[ featureName ];\n\tif ( !pref ) {\n\t\treturn null;\n\t}\n\tconst currentValue = mw.user.clientPrefs.get( featureName );\n\t// The client preference was invalid. This shouldn't happen unless a gadget\n\t// or script has modified the documentElement.\n\tif ( typeof currentValue === 'boolean' ) {\n\t\treturn null;\n\t}\n\tconst row = createRow( '' );\n\tconst form = document.createElement( 'form' );\n\tconst type = pref.type || 'radio';\n\tswitch ( type ) {\n\t\tcase 'radio':\n\t\t\tpref.options.forEach( ( value ) => {\n\t\t\t\tappendRadioToggle( form, featureName, value, currentValue, config );\n\t\t\t} );\n\t\t\tbreak;\n\t\tcase 'switch': {\n\t\t\tconst labelElement = document.createElement( 'label' );\n\t\t\tlabelElement.textContent = getFeatureLabelMsg( featureName ).text();\n\t\t\tappendToggleSwitch( form, featureName, labelElement, currentValue, config );\n\t\t\tbreak;\n\t\t} default:\n\t\t\tthrow new Error( 'Unknown client preference! Only switch or radio are supported.' );\n\t}\n\trow.appendChild( form );\n\treturn row;\n}\n\n/**\n * @param {Element} parent\n * @param {string} featureName\n * @param {Record<string,ClientPreference>} config\n */\nfunction makeClientPreference( parent, featureName, config ) {\n\tconst labelMsg = getFeatureLabelMsg( featureName );\n\t// If the user is not debugging messages and no language exists,\n\t// exit as its a hidden client preference.\n\tif ( !labelMsg.exists() && mw.config.get( 'wgUserLanguage' ) !== 'qqx' ) {\n\t\treturn;\n\t} else {\n\t\tconst id = `skin-client-prefs-${ featureName }`;\n\t\t// @ts-ignore TODO: upstream patch URL\n\t\tconst portlet = mw.util.addPortlet( id, labelMsg.text() );\n\t\tconst labelElement = portlet.querySelector( 'label' );\n\t\t// eslint-disable-next-line mediawiki/msg-doc\n\t\tconst descriptionMsg = mw.message( `${ featureName }-description` );\n\t\tif ( descriptionMsg.exists() ) {\n\t\t\tconst desc = document.createElement( 'span' );\n\t\t\tdesc.classList.add( 'skin-client-pref-description' );\n\t\t\tdesc.textContent = descriptionMsg.text();\n\t\t\tif ( labelElement && labelElement.parentNode ) {\n\t\t\t\tlabelElement.appendChild( desc );\n\t\t\t}\n\t\t}\n\t\tconst row = makeControl( featureName, config );\n\t\tparent.appendChild( portlet );\n\t\tif ( row ) {\n\t\t\tconst tmp = mw.util.addPortletLink( id, '', '' );\n\t\t\t// create a dummy link\n\t\t\tif ( tmp ) {\n\t\t\t\tconst link = tmp.querySelector( 'a' );\n\t\t\t\tif ( link ) {\n\t\t\t\t\tlink.replaceWith( row );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Fills the client side preference dropdown with controls.\n * @param {string} selector of element to fill with client preferences\n * @param {Record<string,ClientPreference>} config\n * @return {Promise<Node>}\n */\nfunction render( selector, config ) {\n\tconst node = document.querySelector( selector );\n\tif ( !node ) {\n\t\treturn Promise.reject();\n\t}\n\treturn new Promise( ( resolve ) => {\n\t\tgetVisibleClientPreferences( config ).forEach( ( pref ) => {\n\t\t\tmakeClientPreference( node, pref, config );\n\t\t} );\n\t\tmw.requestIdleCallback( () => {\n\t\t\tresolve( node );\n\t\t} );\n\t} );\n}\n\n/**\n * @param {string} clickSelector what to click\n * @param {string} renderSelector where to render\n * @param {Record<string,ClientPreference>} config\n */\nfunction bind( clickSelector, renderSelector, config ) {\n\tlet enhanced = false;\n\tconst chk = /** @type {HTMLInputElement} */ (\n\t\tdocument.querySelector( clickSelector )\n\t);\n\tif ( !chk ) {\n\t\treturn;\n\t}\n\tif ( chk.checked ) {\n\t\trender( renderSelector, config );\n\t\tenhanced = true;\n\t} else {\n\t\tchk.addEventListener( 'input', () => {\n\t\t\tif ( enhanced ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\trender( renderSelector, config );\n\t\t\tenhanced = true;\n\t\t} );\n\t}\n}\nmodule.exports = {\n\tbind,\n\ttoggleDocClassAndSave,\n\trender\n};\n","/* global $ */\n/* See T354224 for information on the @wikimedia/mediawiki.skins.clientpreferences module. */\nvar clientPrefs = require( '@wikimedia/mediawiki.skins.clientpreferences' ),\n\ttoast = require( './mobile.startup/showOnPageReload' ),\n\tamcOutreach = require( './mobile.startup/amcOutreach/amcOutreach' ),\n\tEXPAND_SECTIONS_KEY = 'mf-expand-sections',\n\tmsg = mw.msg,\n\tUSER_FONT_SIZE_SMALL = 'small',\n\tUSER_FONT_SIZE_REGULAR = 'regular',\n\tUSER_FONT_SIZE_LARGE = 'large',\n\tTHEME = 'skin-theme',\n\tNIGHT_MODE_THEME_LEGACY = 'skin-night-mode',\n\t// FIXME: This value should be synced between back-end and front-end code,\n\t// but it's currently hard-coded because ResourceLoader virtual imports\n\t// i.e. require( './config.json') are incompatible with the\n\t// Webpack build. Requires updating to Webpack 5 and common.js magic comments.\n\t// https://webpack.js.org/configuration/module/#moduleparserjavascriptcommonjsmagiccomments\n\t// e.g: require(/* webpackIgnore: true */ './config.json');\n\tFONT_SIZE_KEY = 'mf-font-size';\n/**\n * Notifies the user that settings were asynchronously saved.\n *\n * @param {boolean} [isPending] if set toast will show after page has been reloaded.\n */\nfunction notify( isPending ) {\n\tif ( isPending ) {\n\t\ttoast.showOnPageReload( msg( 'mobile-frontend-settings-save' ) );\n\t} else {\n\t\tmw.notify( msg( 'mobile-frontend-settings-save' ) );\n\t}\n}\n\n/**\n * Adds a font changer field to the form\n *\n * @param {jQuery.Object} $form\n * @param {Record<string,ClientPreference>} clientPreferences\n * @return {Promise<Node>}\n */\nfunction addClientPreferencesToForm( $form, clientPreferences ) {\n\tconst cp = document.createElement( 'div' );\n\tconst id = 'mf-client-preferences';\n\tcp.id = id;\n\t$form.prepend( cp );\n\treturn clientPrefs.render( `#${id}`, clientPreferences, true );\n}\n\n/**\n * Helper method to infuse checkbox elements with OO magic\n * Additionally it applies all known hacks to make it mobile friendly\n *\n * @param {Object[]} toggleObjects an array of toggle objects to infuse\n * @param {jQuery.Object} $form form to submit when there is interaction with toggle\n */\nfunction infuseToggles( toggleObjects, $form ) {\n\ttoggleObjects.forEach( function ( toggleObject ) {\n\t\tvar\n\t\t\t$toggleElement = toggleObject.$el,\n\t\t\ttoggleSwitch,\n\t\t\tenableToggle,\n\t\t\t$checkbox;\n\n\t\tenableToggle = OO.ui.infuse( $toggleElement );\n\t\t$checkbox = enableToggle.$element;\n\n\t\ttoggleSwitch = new OO.ui.ToggleSwitchWidget( {\n\t\t\tvalue: enableToggle.isSelected()\n\t\t} );\n\t\t// Strangely the ToggleSwitchWidget does not behave as an input so any change\n\t\t// to it is not reflected in the form. (see T182466)\n\t\t// Ideally we'd replaceWith here and not have to hide the original element.\n\t\ttoggleSwitch.$element.insertAfter( $checkbox );\n\t\t// although the checkbox is hidden already, that is done via visibility\n\t\t// as a result, it still takes up space. We don't want it to any more now that the\n\t\t// new toggle switch has been added.\n\t\t$checkbox.hide();\n\n\t\t// listening on checkbox change is required to make the clicking on label working.\n\t\t// Otherwise clicking on label changes the checkbox \"checked\" state\n\t\t// but it's not reflected in the toggle switch\n\t\t$checkbox.on( 'change', function () {\n\t\t\t// disable checkbox as submit is delayed by 0.25s\n\t\t\t$checkbox.attr( 'disabled', true );\n\t\t\ttoggleSwitch.setValue( enableToggle.isSelected() );\n\t\t} );\n\t\ttoggleSwitch.on( 'change', function ( value ) {\n\t\t\t// execute callback\n\t\t\ttoggleObject.onToggle( value );\n\n\t\t\t// ugly hack, we're delaying submit form by 0.25s\n\t\t\t// and we want to disable registering clicks\n\t\t\t// we want to disable the toggleSwitch\n\t\t\t// but we cannot use setDisabled(true) as it makes button gray\n\t\t\ttoggleSwitch.setValue = function () {};\n\n\t\t\t$checkbox.find( 'input' )\n\t\t\t\t.prop( 'checked', value );\n\t\t\tnotify( true );\n\t\t\t// On some Android devices animation gets stuck in the middle as browser\n\t\t\t// starts submitting the form.\n\t\t\t// Let's call submit on the form after toggle button transition is done\n\t\t\t// (0.25s, defined in OOUI)\n\t\t\tsetTimeout( function () {\n\t\t\t\t$form.trigger( 'submit' );\n\t\t\t}, 250 );\n\t\t} );\n\t} );\n}\n\n/**\n * Add features, that depends on localStorage, such as \"expand all sections\" or \"fontchanger\".\n * The checkbox is used for turning on/off expansion of all sections on page load.\n */\nfunction initMobileOptions() {\n\tvar $form = $( '#mobile-options' ),\n\t\t$betaToggle = $( '#enable-beta-toggle' ),\n\t\t$amcToggle = $( '#enable-amc-toggle' ),\n\t\ttoggles = [];\n\n\tif ( $betaToggle.length ) {\n\t\ttoggles.push( {\n\t\t\t$el: $betaToggle,\n\t\t\tonToggle: function () {}\n\t\t} );\n\t}\n\tif ( $amcToggle.length ) {\n\t\ttoggles.push( {\n\t\t\t$el: $amcToggle,\n\t\t\tonToggle: function ( value ) {\n\t\t\t\tif ( !value && amcOutreach.loadCampaign().isCampaignActive() ) {\n\t\t\t\t\t// Make all amc outreach actions ineligible so the user doesn't have\n\t\t\t\t\t// to see the outreach drawer again\n\t\t\t\t\tamcOutreach.loadCampaign().makeAllActionsIneligible();\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n\tinfuseToggles( toggles, $form );\n\n\tconst clientPreferences = {};\n\n\tif ( mw.config.get( 'wgMFEnableFontChanger' ) ) {\n\t\tclientPreferences[ FONT_SIZE_KEY ] = {\n\t\t\toptions: [\n\t\t\t\tUSER_FONT_SIZE_SMALL,\n\t\t\t\tUSER_FONT_SIZE_REGULAR,\n\t\t\t\tUSER_FONT_SIZE_LARGE\n\t\t\t],\n\t\t\tpreferenceKey: FONT_SIZE_KEY,\n\t\t\tcallback: notify\n\t\t};\n\t}\n\n\tconst skin = mw.config.get( 'skin' );\n\t// Register for legacy classes and new classes depending on whether the legacy class is found on\n\t// the documentElement.\n\t// FIXME: We can remove the NIGHT_MODE_THEME_LEGACY reference once T359983 is resolved.\n\tconst docClass = document.documentElement.getAttribute( 'class' );\n\tif ( docClass.indexOf( `${NIGHT_MODE_THEME_LEGACY}-clientpref` ) > -1 ) {\n\t\tclientPreferences[ NIGHT_MODE_THEME_LEGACY ] = {\n\t\t\toptions: [ '2', '0', '1' ],\n\t\t\tpreferenceKey: `${skin}-night-mode`\n\t\t};\n\t} else {\n\t\tclientPreferences[ THEME ] = {\n\t\t\toptions: [ 'day', 'night', 'os' ],\n\t\t\tpreferenceKey: `${skin}-theme`\n\t\t};\n\t}\n\n\tclientPreferences[ EXPAND_SECTIONS_KEY ] = {\n\t\toptions: [\n\t\t\t'0',\n\t\t\t'1'\n\t\t],\n\t\ttype: 'switch',\n\t\tpreferenceKey: EXPAND_SECTIONS_KEY,\n\t\tcallback: notify\n\t};\n\n\tif ( !mw.user.isAnon() ) {\n\t\tclientPreferences[ 'mw-mf-amc' ] = {\n\t\t\toptions: [\n\t\t\t\t'0',\n\t\t\t\t'1'\n\t\t\t],\n\t\t\ttype: 'switch',\n\t\t\tpreferenceKey: 'mf_amc_optin',\n\t\t\tcallback: () => location.reload()\n\t\t};\n\t}\n\n\t// Transport existing links to new layout.\n\n\t/**\n\t * Currently toggle switches have duplicate headings and a description that is not\n\t * part of the toggle switch layout.\n\t * This works around this to retain the classic MobileFrontend layout for these\n\t * controls.\n\t * FIXME: This should be upstreamed to @wikimedia/mediawiki.skins.clientpreferences\n\t *\n\t * @param {jQuery} $node\n\t */\n\tfunction modifyToggleSwitch( $node ) {\n\t\t// Move the description from the heading into the label.\n\t\t$node.find( '.skin-client-pref-description' )\n\t\t\t.appendTo( $node.find( '.cdx-toggle-switch__label' ) );\n\t\t// Drop the duplicate label.\n\t\t$node.find( '> label' ).remove();\n\t}\n\n\taddClientPreferencesToForm( $form, clientPreferences ).then( () => {\n\t\t// Make some modifications that are currently not supported by the Vector client preferences\n\t\t// Move the links from the server side preference into the row.\n\t\t$( '#amc-field .option-links' ).appendTo( '#skin-client-prefs-mw-mf-amc' );\n\t\tmodifyToggleSwitch( $( '#skin-client-prefs-mf-expand-sections' ) );\n\t\tmodifyToggleSwitch( $( '#skin-client-prefs-mw-mf-amc' ) );\n\t\t// Remove the server side rendered OOUI field.\n\t\t$( '#amc-field' ).remove();\n\n\t} );\n}\n\nmw.loader.using( 'oojs-ui-widgets' ).then( initMobileOptions );\n"],"names":["api","toggleDocClassAndSave","featureName","value","config","pref","callback","mw","user","isNamed","options","forEach","possibleValue","document","documentElement","classList","remove","add","util","debounce","Api","saveOption","preferenceKey","then","clientPrefs","set","getInputId","makeInputElement","type","input","createElement","name","id","checked","setAttribute","makeLabelElement","label","textContent","msg","getFeatureLabelMsg","message","render","selector","node","querySelector","Promise","resolve","active","Array","from","filter","className","match","map","split","Object","keys","key","indexOf","getVisibleClientPreferences","parent","labelMsg","exists","get","portlet","addPortlet","text","labelElement","descriptionMsg","desc","parentNode","appendChild","row","currentValue","createRow","form","icon","container","addEventListener","appendRadioToggle","switcher","grip","toggleSwitch","appendToggleSwitch","Error","makeControl","tmp","addPortletLink","link","replaceWith","makeClientPreference","requestIdleCallback","reject","module","exports","bind","clickSelector","renderSelector","enhanced","chk","require","toast","amcOutreach","EXPAND_SECTIONS_KEY","NIGHT_MODE_THEME_LEGACY","FONT_SIZE_KEY","notify","isPending","showOnPageReload","loader","using","$form","$","$betaToggle","$amcToggle","toggles","length","push","$el","onToggle","loadCampaign","isCampaignActive","makeAllActionsIneligible","toggleObjects","toggleObject","enableToggle","$checkbox","$toggleElement","OO","ui","infuse","$element","ToggleSwitchWidget","isSelected","insertAfter","hide","on","attr","setValue","find","prop","setTimeout","trigger","infuseToggles","clientPreferences","skin","modifyToggleSwitch","$node","appendTo","getAttribute","concat","isAnon","location","reload","cp","prepend","addClientPreferencesToForm"],"sourceRoot":""}