{
  "comments": [
    {
      "key": {
        "uuid": "d7954145_b1edbfeb",
        "filename": "extension.json",
        "patchSetId": 2
      },
      "lineNbr": 220,
      "author": {
        "id": 2426
      },
      "writtenOn": "2019-01-11T00:20:24Z",
      "side": 1,
      "message": "Any reason not to rename this guy? Given that this is mingling with a bunch of other images, content-ltr seems too ambiguous to me. Also, what do you think about toc subdirectory to match the source subdirectory used?",
      "range": {
        "startLine": 220,
        "startChar": 44,
        "endLine": 220,
        "endChar": 56
      },
      "revId": "ebeabc9a21a1160ad44a0210510a4037be497e38",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e46d1b74_1d77b9c1",
        "filename": "src/mobile.startup/toc/TableOfContents.js",
        "patchSetId": 2
      },
      "lineNbr": 35,
      "author": {
        "id": 2950
      },
      "writtenOn": "2019-01-11T19:16:18Z",
      "side": 1,
      "message": "Can you explain why it\u0027s better to inject this on postRender? It seems like having it in the template would be more predictable, as it wouldn\u0027t be prone to breakage if the template changes. \n\nAlso, a \u0027new\u0027 without a var feels like it\u0027s breaking our linting rules (if only in spirit :P) https://eslint.org/docs/rules/no-new",
      "revId": "ebeabc9a21a1160ad44a0210510a4037be497e38",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9fc03d65_5454736c",
        "filename": "src/mobile.startup/toc/TableOfContents.js",
        "patchSetId": 2
      },
      "lineNbr": 35,
      "author": {
        "id": 94
      },
      "writtenOn": "2019-01-11T19:30:35Z",
      "side": 1,
      "message": "It\u0027s better because we can make full use of the Icon and its capabilities. \n\nPreviously the use of toHtmlString meant we were unnecessarily creating a component and then rendering its associated HTML\n\nIt would be like doing this in React:\n\n\u003cView\u003e{{ _dangerouslyInsertHtml: preact.renderToString( \u003cButton /\u003e ) }\u003c/View\u003e\n\nLong term this will make it much easier to reduce our components down to factory functions (see DownloadIcon and ShareIcon in Minerva for example) and cut our need for inheritance!\n\nI\u0027d like to get us to a point where  table of contents looks like this\n\nfunction toc( {) {\nreturn \u003cdiv class\u003d\"toc-mobile\"\u003e\n\u003ch2\u003e\u003cIcon name\u003dtoc /\u003e\u003cspan\u003e{{contentsMsg}}\u003c/span\u003e\u003c/h2\u003e\n\u003cdiv\u003e\n        \u003cul\u003e\n        {{sections.map((props)\u003d\u003etocHeading(props)}}\n        \u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv style\u003d\"clear:both;\"\u003e\u003c/div\u003e\n\u003c/div\u003e\n}\n\nThis works towards that.",
      "parentUuid": "e46d1b74_1d77b9c1",
      "revId": "ebeabc9a21a1160ad44a0210510a4037be497e38",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    }
  ]
}