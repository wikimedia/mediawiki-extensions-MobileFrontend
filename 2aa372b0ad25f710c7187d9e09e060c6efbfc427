{
  "comments": [
    {
      "key": {
        "uuid": "4e04eb01_8dbcedb2",
        "filename": "tests/modules/MFResourceLoaderModuleTest.php",
        "patchSetId": 2
      },
      "lineNbr": 115,
      "author": {
        "id": 43
      },
      "writtenOn": "2014-02-27T23:36:59Z",
      "side": 1,
      "message": "This is not cross-platform safe.",
      "revId": "2aa372b0ad25f710c7187d9e09e060c6efbfc427",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4e04eb01_cd0c3548",
        "filename": "tests/modules/MFResourceLoaderModuleTest.php",
        "patchSetId": 2
      },
      "lineNbr": 115,
      "author": {
        "id": 94
      },
      "writtenOn": "2014-02-28T00:11:56Z",
      "side": 1,
      "message": "It doesn\u0027t actually access a file. It\u0027s just a string for lookup purposes.",
      "parentUuid": "4e04eb01_8dbcedb2",
      "revId": "2aa372b0ad25f710c7187d9e09e060c6efbfc427",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4e04eb01_3ffdfc04",
        "filename": "tests/modules/MFResourceLoaderModuleTest.php",
        "patchSetId": 2
      },
      "lineNbr": 121,
      "author": {
        "id": 94
      },
      "writtenOn": "2014-02-28T00:12:52Z",
      "side": 1,
      "message": "uncomment line",
      "revId": "2aa372b0ad25f710c7187d9e09e060c6efbfc427",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4e04eb01_8d062d22",
        "filename": "tests/modules/MFResourceLoaderModuleTest.php",
        "patchSetId": 2
      },
      "lineNbr": 173,
      "author": {
        "id": 94
      },
      "writtenOn": "2014-02-28T00:12:52Z",
      "side": 1,
      "message": "Should be $mock \u003d $this-\u003egetMock( \u0027MFResourceLoaderModule\u0027, array( \u0027safeFilemtime\u0027 ) );",
      "revId": "2aa372b0ad25f710c7187d9e09e060c6efbfc427",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4e04eb01_1f000003",
        "filename": "tests/modules/MFResourceLoaderModuleTest.php",
        "patchSetId": 2
      },
      "lineNbr": 175,
      "author": {
        "id": 94
      },
      "writtenOn": "2014-02-28T00:12:52Z",
      "side": 1,
      "message": "uncomment line",
      "revId": "2aa372b0ad25f710c7187d9e09e060c6efbfc427",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4e04eb01_df573804",
        "filename": "tests/modules/MFResourceLoaderModuleTest.php",
        "patchSetId": 2
      },
      "lineNbr": 175,
      "author": {
        "id": 91
      },
      "writtenOn": "2014-02-28T00:32:18Z",
      "side": 1,
      "message": "i do not think this is safe to rely on and i can\u0027t quite grok how this functionality is supposed to work. According to the phpunit docs, mocking static methods is not possible (http://phpunit.de/manual/3.7/en/test-doubles.html#test-doubles.mock-objects see \u0027Limitations\u0027), however, sebastian bergman has a blog post with some examples of how to do this (which I presume is where you got this?). digging deeper, even phpunit devs don\u0027t understand how this is supposed to work and they\u0027re getting rid of the functionality in future versions of phpunit (https://github.com/sebastianbergmann/phpunit-documentation/issues/77#issuecomment-23323786)",
      "revId": "2aa372b0ad25f710c7187d9e09e060c6efbfc427",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    }
  ]
}