{
  "comments": [
    {
      "key": {
        "uuid": "063c2ef0_54be9c35",
        "filename": "tests/node-qunit/mobile.startup/CtaDrawer.test.html.js",
        "patchSetId": 3
      },
      "lineNbr": 10,
      "author": {
        "id": 94
      },
      "writtenOn": "2018-11-29T23:31:02Z",
      "side": 1,
      "message": "why not just stub the message so it\u0027s always  mobile-frontend-watchlist-cta-button-login ?",
      "revId": "b225adfb0c2d50da2f594314c40799c40805bc97",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a4224d4_45c198bc",
        "filename": "tests/node-qunit/mobile.startup/CtaDrawer.test.html.js",
        "patchSetId": 3
      },
      "lineNbr": 10,
      "author": {
        "id": 2426
      },
      "writtenOn": "2018-11-30T15:25:52Z",
      "side": 1,
      "message": "I wanted to avoid writing extra code that only supports our weird QUnit browser tests. Since I have a regex here already, this was perfect.",
      "parentUuid": "063c2ef0_54be9c35",
      "revId": "b225adfb0c2d50da2f594314c40799c40805bc97",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a12376bc_9b6cc817",
        "filename": "tests/node-qunit/mobile.startup/CtaDrawer.test.html.js",
        "patchSetId": 3
      },
      "lineNbr": 10,
      "author": {
        "id": 94
      },
      "writtenOn": "2018-11-30T15:48:10Z",
      "side": 1,
      "message": "Personally it confuses me seeing mobile-frontend-watchlist-cta-button-login here as I have to work out where it comes from.\n\nStubbing would make that explicit and I see that as useful for our headless unit tests.\n\nThe lack of stubbing here is made this file into a weird regex which makes things even more confusing.",
      "parentUuid": "3a4224d4_45c198bc",
      "revId": "b225adfb0c2d50da2f594314c40799c40805bc97",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f40112a0_db1698b3",
        "filename": "tests/node-qunit/mobile.startup/CtaDrawer.test.html.js",
        "patchSetId": 3
      },
      "lineNbr": 10,
      "author": {
        "id": 2426
      },
      "writtenOn": "2018-11-30T17:22:42Z",
      "side": 1,
      "message": "Stubbed.",
      "parentUuid": "a12376bc_9b6cc817",
      "revId": "b225adfb0c2d50da2f594314c40799c40805bc97",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4f6f1d8e_f9681e64",
        "filename": "tests/node-qunit/mobile.startup/CtaDrawer.test.js",
        "patchSetId": 3
      },
      "lineNbr": 61,
      "author": {
        "id": 94
      },
      "writtenOn": "2018-11-29T23:31:02Z",
      "side": 1,
      "message": "So the problem I have with this is it\u0027s going to change every time CtaDrawer.hogan changes and is not tied to those templates in any way.\n\nHow about instead of doing this we a helper function for flattening HTML like this:\nhttps://phabricator.wikimedia.org/P7871\n\nI don\u0027t see much benefit in having the template of all it\u0027s being used is to validate HTML doesn\u0027t change.",
      "revId": "b225adfb0c2d50da2f594314c40799c40805bc97",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f0474d7c_42f3f969",
        "filename": "tests/node-qunit/mobile.startup/CtaDrawer.test.js",
        "patchSetId": 3
      },
      "lineNbr": 61,
      "author": {
        "id": 2426
      },
      "writtenOn": "2018-11-30T15:25:52Z",
      "side": 1,
      "message": "\u003e So the problem I have with this is it\u0027s going to change every time CtaDrawer.hogan changes and is not tied to those templates in any way.\n\nIsn\u0027t this is a problem with testing the HTML of any our components?\n\n\u003e https://phabricator.wikimedia.org/P7871\n\u003e \u0027\u003cdiv class\u003d\"drawer position-fixed view-border-box\"\u003e\u003cdiv class\u003d\"mw-ui-icon mw-ui-icon-mf-arrow mw-ui-icon-element cancel\" title\u003d\"\"\u003e\u003c/div\u003e\u003cp\u003e\u003c/p\u003e\u003ca href\u003d\"Special:UserLogin\" class\u003d\"mw-ui-button mw-ui-progressive \"\u003emobile-frontend-watchlist-cta-button-login\u003c/a\u003e\u003cdiv\u003e\u003ca href\u003d\"Special:UserLogin\" class\u003d\"mw-ui-anchor mw-ui-progressive \"\u003emobile-frontend-watchlist-cta-button-signup\u003c/a\u003e\u003c/div\u003e\u003c/div\u003e\u0027\n\nThis is that mile long string option I mentioned I wanted to avoid. Keeping some sensible formatting seems vastly superior to me and is quite similar indeed to the code you yourself wrote in PageInputs.html.js.\n\n\u003e function stripWhitespaceHTML( str ) {\n\u003e \treturn str.replace( /\\s+/g, \u0027 \u0027 )\n\u003e \t\t// strip spaces before opening tags\n\u003e \t\t.replace( / \u003c/g, \u0027\u003c\u0027 );\n\u003e }\n\nHow is this better than the approach I\u0027ve suggested? You\u0027ve simply switched what we\u0027re RegExp-ing and stripped whitespace instead of allowing it.\n\n\u003e I don\u0027t see much benefit in having the template of all it\u0027s being used is to validate HTML doesn\u0027t change.\n\nI\u0027m happy to abandon this patch.",
      "parentUuid": "4f6f1d8e_f9681e64",
      "revId": "b225adfb0c2d50da2f594314c40799c40805bc97",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "452a66f9_38c74ef8",
        "filename": "tests/node-qunit/mobile.startup/CtaDrawer.test.js",
        "patchSetId": 3
      },
      "lineNbr": 61,
      "author": {
        "id": 94
      },
      "writtenOn": "2018-11-30T15:48:10Z",
      "side": 1,
      "message": "FWIW I don\u0027t see any problems with a long string but I can also see why we might want to avoid that. I don\u0027t feel strongly either way, but if  the goal is just to check this HTML it seems like a lot of work to avoid writing a long string and a lot of work to test the output HTML. It took me a while to just understand this test.\n\nWhen I see a file like CtaDrawer.test.html.js I expect it to just be HTML and when I see it out of context (e.g. in gerrit/git diff) it surprises me. When I see it here I realise it\u0027s actually a RegEx (and all the mental tax that comes with understanding a RegEx.) and then I wonder why...\n\nMy thought was if you had a named function explaining what\u0027s going on here, and a pure HTML input, there would be less room for misunderstanding / confusion.",
      "parentUuid": "f0474d7c_42f3f969",
      "revId": "b225adfb0c2d50da2f594314c40799c40805bc97",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c673a60d_fb2ec127",
        "filename": "tests/node-qunit/mobile.startup/CtaDrawer.test.js",
        "patchSetId": 3
      },
      "lineNbr": 61,
      "author": {
        "id": 2426
      },
      "writtenOn": "2018-11-30T17:22:42Z",
      "side": 1,
      "message": "\u003e It took me a while to just understand this test.\n\nIf I can\u0027t read a string then I won\u0027t. The string suggested is over 300 characters long. On a single line, it\u0027s definitely in the \"won\u0027t\" bucket. The approach I\u0027ve suggested may take an upfront 5 minute investment to understand how it\u0027s wired in but then it\u0027s easily readable and editable. A formatted string is a clear readability win in my opinion.\n\n\u003e When I see a file like CtaDrawer.test.html.js I expect it to just be HTML and when I see it out of context (e.g. in gerrit/git diff) it surprises me. When I see it here I realise it\u0027s actually a RegEx (and all the mental tax that comes with understanding a RegEx.) and then I wonder why...\n\nI\u0027ve removed the two label RegExps...",
      "parentUuid": "452a66f9_38c74ef8",
      "revId": "b225adfb0c2d50da2f594314c40799c40805bc97",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "26dbccb0_ae959862",
        "filename": "tests/node-qunit/mobile.startup/CtaDrawer.test.js",
        "patchSetId": 3
      },
      "lineNbr": 61,
      "author": {
        "id": 94
      },
      "writtenOn": "2018-11-30T19:13:33Z",
      "side": 1,
      "message": "Yeh but there\u0027s still regex strings in that which are not valid html.  Maybe CtaDrawer.test.regex might make a better name but even with that change I worry this test is overly complicating things.\n\n1) It feels like the reason we are having so much trouble here is we fake template loading in our tests so the HTML mismatches what is actually used in production. Our template loading in headless mode is a file loading hack. it doesn\u0027t represent how we do things in production. It seems we are trying hard in this patch to work around that... plus it gives the false impression we\u0027re testing end to end.\n\n2) More crucially, to me, we already test the usability of CtaDrawers in tests/browser/features/pageactions.feature reliably on every commit and against the beta cluster every day so I don\u0027t see much value in checking the actual HTML of this method. These tests at least ensure things display.\n\n3) These unit tests could be more granular and simplified to test smaller pieces (via spies on methods that are called, or querying the DOM like Nick did in https://gerrit.wikimedia.org/r/#/c/mediawiki/extensions/MobileFrontend/+/472193/) rather than checking the entire HTML itself. I don\u0027t feel this is something we will want to do for every View especially given the large refactors we might expect come February which will likely change HTML.\n\nThings that would make a refactor safer would be identifying upfront what can and what can\u0027t change. Whitespace doesn\u0027t seem to be a big deal but:\n* class could change\n* the hide behaviour that\u0027s used by the red link overlay (https://gerrit.wikimedia.org/r/476576) is likely to change\n* the href behaviour (https://gerrit.wikimedia.org/r/476579) seems important and can change with different inputs\n* it\u0027s not clear what happens when certain options are not set.\n\nThese seem more useful than checking the HTML.\n\nI\u0027ll let others chime in but that\u0027s where I stand on this change and testing View\u0027s in general (https://phabricator.wikimedia.org/T209126) which I guess is what we\u0027re trying to work out here :).",
      "parentUuid": "c673a60d_fb2ec127",
      "revId": "b225adfb0c2d50da2f594314c40799c40805bc97",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6014f317_3cbb6c94",
        "filename": "tests/node-qunit/mobile.startup/CtaDrawer.test.js",
        "patchSetId": 3
      },
      "lineNbr": 64,
      "author": {
        "id": 94
      },
      "writtenOn": "2018-11-29T23:31:02Z",
      "side": 1,
      "message": "why not assert.ok( sinon.assert.match( subject.$el.get( 0 ).outerHTML, html ) ) ?",
      "revId": "b225adfb0c2d50da2f594314c40799c40805bc97",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "de33a667_e11ffa71",
        "filename": "tests/node-qunit/mobile.startup/CtaDrawer.test.js",
        "patchSetId": 3
      },
      "lineNbr": 64,
      "author": {
        "id": 2426
      },
      "writtenOn": "2018-11-30T15:25:52Z",
      "side": 1,
      "message": "sinon.assert.match() appears to assert correctly by itself. Asserting an assertion is less readable to me. assert.ok( true ) is just the workaround for QUnit.",
      "parentUuid": "6014f317_3cbb6c94",
      "revId": "b225adfb0c2d50da2f594314c40799c40805bc97",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ecfec22e_c947d2e1",
        "filename": "tests/node-qunit/mobile.startup/CtaDrawer.test.js",
        "patchSetId": 3
      },
      "lineNbr": 64,
      "author": {
        "id": 94
      },
      "writtenOn": "2018-11-30T15:48:10Z",
      "side": 1,
      "message": "Okay. was curious as i\u0027m only used to seeing this line inside async callbacks\n\nSeems strange that you have to do assert.ok( true ). I assume above throws an exception if there is a problem?\n\nIs this something solved in a future qunit upgrade?",
      "parentUuid": "de33a667_e11ffa71",
      "revId": "b225adfb0c2d50da2f594314c40799c40805bc97",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "18f77f66_1663caed",
        "filename": "tests/node-qunit/mobile.startup/CtaDrawer.test.js",
        "patchSetId": 3
      },
      "lineNbr": 64,
      "author": {
        "id": 2426
      },
      "writtenOn": "2018-11-30T17:22:42Z",
      "side": 1,
      "message": "assert.expect(0) is preferable but unfortunately seems to behave differently in the browser. I\u0027m not interested in investigating in QUnit / Sinon.JS interactions since we\u0027re so many versions behind on the latter.\n\nWhere an assertion is used, I try to keep it near the termination of the test. For async tests, this is in the callback.",
      "parentUuid": "ecfec22e_c947d2e1",
      "revId": "b225adfb0c2d50da2f594314c40799c40805bc97",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    }
  ]
}