{
  "comments": [
    {
      "key": {
        "uuid": "4e4cebb2_dc43ed41",
        "filename": "/COMMIT_MSG",
        "patchSetId": 21
      },
      "lineNbr": 17,
      "author": {
        "id": 1963
      },
      "writtenOn": "2016-04-14T21:50:40Z",
      "side": 1,
      "message": "This line is no longer true.",
      "revId": "60a5ad002f1c61fa0f45e009c540808c87c47c49",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ce38dbff_25152d9d",
        "filename": "resources/mobile.references.gateway/ReferencesGateway.js",
        "patchSetId": 21
      },
      "lineNbr": 17,
      "author": {
        "id": 1948
      },
      "writtenOn": "2016-04-14T18:16:43Z",
      "side": 1,
      "message": "Missing \"@method\" tag and argument/return descriptions to match `getReference` method below.",
      "revId": "60a5ad002f1c61fa0f45e009c540808c87c47c49",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ce38dbff_4512f1b6",
        "filename": "resources/mobile.references.gateway/ReferencesGateway.js",
        "patchSetId": 21
      },
      "lineNbr": 27,
      "author": {
        "id": 1948
      },
      "writtenOn": "2016-04-14T18:16:43Z",
      "side": 1,
      "message": "Any reason for not omitting the second argument?",
      "revId": "60a5ad002f1c61fa0f45e009c540808c87c47c49",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ce38dbff_057f49de",
        "filename": "resources/mobile.references.gateway/ReferencesGateway.js",
        "patchSetId": 21
      },
      "lineNbr": 41,
      "author": {
        "id": 1948
      },
      "writtenOn": "2016-04-14T18:16:43Z",
      "side": 1,
      "message": "Since this implementation should never be run anyways , why not use the values as a chance to describe the attributes of this arbitrary Object? e.g.\n\n    {\n        id: id,\n        pageTitle: \u0027the title of the page\u0027, // page.title fits here as well, so no change necessary\n        msg: \u0027describe the purpose of this attribute\u0027 // as right now I can\u0027t tell what it\u0027s for at all (the reference HTML? Reference text? An error message?)\n    }\n\nOtherwise (if you foresee use of it), can we be a bit more descriptive than \"using @interface\"? I imagine this code path would only be hit in an event where we were unable to retrieve a reference, so let\u0027s treat it like a proper error message. Please correct me if I\u0027m misunderstanding this implementation completely.",
      "revId": "60a5ad002f1c61fa0f45e009c540808c87c47c49",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ce38dbff_e5bce569",
        "filename": "resources/mobile.references.gateway/ReferencesHtmlScraperGateway.js",
        "patchSetId": 21
      },
      "lineNbr": 30,
      "author": {
        "id": 1948
      },
      "writtenOn": "2016-04-14T18:16:43Z",
      "side": 1,
      "message": "According to the base class\u0027s implementation, the returned Object should include the reference ID, the page\u0027s title, and a \"msg\" attribute. Not simply a \"text\" attribute. If you had to correct my understanding in ReferencesGateway.js, then you can safely ignore this comment.",
      "revId": "60a5ad002f1c61fa0f45e009c540808c87c47c49",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ce38dbff_457311e6",
        "filename": "resources/mobile.references.gateway/ReferencesMobileViewGateway.js",
        "patchSetId": 21
      },
      "lineNbr": 29,
      "author": {
        "id": 1948
      },
      "writtenOn": "2016-04-14T18:16:43Z",
      "side": 1,
      "message": "Should probably use `this` here, not `self`, no? Leaving `self` used only in the closures.",
      "revId": "60a5ad002f1c61fa0f45e009c540808c87c47c49",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ce38dbff_254d2d9c",
        "filename": "resources/mobile.references.gateway/ReferencesMobileViewGateway.js",
        "patchSetId": 21
      },
      "lineNbr": 38,
      "author": {
        "id": 1948
      },
      "writtenOn": "2016-04-14T18:16:43Z",
      "side": 1,
      "message": "In the ReferencesGateway class you used `page.title`. Let\u0027s stay consistent and either use `page.getTitle()` or `page.title` everywhere.",
      "revId": "60a5ad002f1c61fa0f45e009c540808c87c47c49",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ce38dbff_650c5546",
        "filename": "resources/mobile.references.gateway/ReferencesMobileViewGateway.js",
        "patchSetId": 21
      },
      "lineNbr": 44,
      "author": {
        "id": 1948
      },
      "writtenOn": "2016-04-14T18:16:43Z",
      "side": 1,
      "message": "Is there a reason for this to have a surrounding div? Could we not simply say `$refs \u003d ` on L49 below? Surely a ternary checking for null on L54 would be faster than $.children()?",
      "revId": "60a5ad002f1c61fa0f45e009c540808c87c47c49",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ce38dbff_25440d6e",
        "filename": "resources/mobile.references.gateway/ReferencesMobileViewGateway.js",
        "patchSetId": 21
      },
      "lineNbr": 47,
      "author": {
        "id": 1948
      },
      "writtenOn": "2016-04-14T18:16:43Z",
      "side": 1,
      "message": "I\u0027m confused, doesn\u0027t the api request already limit to one section (the references section)?",
      "revId": "60a5ad002f1c61fa0f45e009c540808c87c47c49",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ce38dbff_401e5f64",
        "filename": "resources/mobile.references.gateway/ReferencesMobileViewGateway.js",
        "patchSetId": 21
      },
      "lineNbr": 67,
      "author": {
        "id": 1948
      },
      "writtenOn": "2016-04-14T18:16:43Z",
      "side": 1,
      "message": "Can more than one `.then()` be chained to a jQuery promise?",
      "revId": "60a5ad002f1c61fa0f45e009c540808c87c47c49",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ce38dbff_e074d398",
        "filename": "resources/mobile.references.gateway/ReferencesMobileViewGateway.js",
        "patchSetId": 21
      },
      "lineNbr": 71,
      "author": {
        "id": 1948
      },
      "writtenOn": "2016-04-14T18:16:43Z",
      "side": 1,
      "message": "Might be better off using $.each to avoid the `this` usage on L74 (the less context switches the better imho). If it would be significantly harder or impact performance though, let\u0027s leave it as-is.",
      "revId": "60a5ad002f1c61fa0f45e009c540808c87c47c49",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ce38dbff_a043eb41",
        "filename": "resources/mobile.references.gateway/ReferencesMobileViewGateway.js",
        "patchSetId": 21
      },
      "lineNbr": 76,
      "author": {
        "id": 1948
      },
      "writtenOn": "2016-04-14T18:16:43Z",
      "side": 1,
      "message": "As `parentGetReference` is only used here, we might be better off not creating a variable for it and calling it directly instead. Creating a variable for a prototype method seems weird to me anyways, although I don\u0027t really have any evidence against it.",
      "revId": "60a5ad002f1c61fa0f45e009c540808c87c47c49",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ce38dbff_a05acb1f",
        "filename": "resources/skins.minerva.scripts/references.js",
        "patchSetId": 21
      },
      "lineNbr": 15,
      "author": {
        "id": 1948
      },
      "writtenOn": "2016-04-14T18:16:43Z",
      "side": 1,
      "message": "I\u0027d rather see a more descriptive var name (e.g. isLazyLoadedEnabled) here since we use `config` all over the place to mean different things, but not a blocker by any means.",
      "revId": "60a5ad002f1c61fa0f45e009c540808c87c47c49",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ce38dbff_e0a333fb",
        "filename": "resources/skins.minerva.scripts/references.js",
        "patchSetId": 21
      },
      "lineNbr": 25,
      "author": {
        "id": 1948
      },
      "writtenOn": "2016-04-14T18:16:43Z",
      "side": 1,
      "message": "Doesn\u0027t appear to be returning a promise. Comment may just need to be updated after copy+paste.",
      "revId": "60a5ad002f1c61fa0f45e009c540808c87c47c49",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ce38dbff_20851b5b",
        "filename": "resources/skins.minerva.scripts/references.js",
        "patchSetId": 21
      },
      "lineNbr": 31,
      "author": {
        "id": 1948
      },
      "writtenOn": "2016-04-14T18:16:43Z",
      "side": 1,
      "message": "Function name should be updated (e.g. makeReferenceDrawer) or implementation should be updated (to handle all requests to var `drawer`). This is not actually a getter.",
      "revId": "60a5ad002f1c61fa0f45e009c540808c87c47c49",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ce38dbff_60960399",
        "filename": "resources/skins.minerva.scripts/references.js",
        "patchSetId": 21
      },
      "lineNbr": 78,
      "author": {
        "id": 1948
      },
      "writtenOn": "2016-04-14T18:16:43Z",
      "side": 1,
      "message": "Pull outside of if; remove else.",
      "revId": "60a5ad002f1c61fa0f45e009c540808c87c47c49",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    }
  ]
}