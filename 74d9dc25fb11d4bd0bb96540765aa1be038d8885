{
  "comments": [
    {
      "key": {
        "uuid": "2ea41786_4a6dae2c",
        "filename": "includes/MobileFormatter.php",
        "patchSetId": 14
      },
      "lineNbr": 124,
      "author": {
        "id": 1948
      },
      "writtenOn": "2016-02-29T18:58:36Z",
      "side": 1,
      "message": "This should probably be on previous line (carried over from style change). Not a blocker obviously.",
      "revId": "74d9dc25fb11d4bd0bb96540765aa1be038d8885",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2ea41786_92a9907a",
        "filename": "includes/MobileFormatter.php",
        "patchSetId": 14
      },
      "lineNbr": 124,
      "author": {
        "id": 94
      },
      "writtenOn": "2016-03-01T23:31:14Z",
      "side": 1,
      "message": "See Baha\u0027s earlier comments. To me this is why I like our team norm [1]\n\n[1] https://www.mediawiki.org/wiki/Reading/Web/Team/Team_norms#Code_review :-)\n\nI think we should expand that point to say we should codify jscs/phpcs rules where we feel the status quo is not correct. Maybe something to bring into the next offsite.\n\nI dream of a world where code styling is not part of code review.\nThis may also be a time to re-evaluate whether we can automate these things now that jscs supports auto linting.",
      "parentUuid": "2ea41786_4a6dae2c",
      "revId": "74d9dc25fb11d4bd0bb96540765aa1be038d8885",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2ea41786_98d8c0f5",
        "filename": "includes/MobileFormatter.php",
        "patchSetId": 14
      },
      "lineNbr": 124,
      "author": {
        "id": 1948
      },
      "writtenOn": "2016-03-03T17:36:07Z",
      "side": 1,
      "message": "This wasn\u0027t blocking, was just leaving my opinion on the code style. Inconsistency (line 122 vs. line 134) irks me. ;) Our norm says to leave comments but not block on them.\n\nAlso, I\u0027m not sure I see a relevant comment from Baha, but I might have just missed it.",
      "parentUuid": "2ea41786_92a9907a",
      "revId": "74d9dc25fb11d4bd0bb96540765aa1be038d8885",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2ea41786_6a5f4a78",
        "filename": "includes/MobileFormatter.php",
        "patchSetId": 14
      },
      "lineNbr": 134,
      "author": {
        "id": 1948
      },
      "writtenOn": "2016-02-29T18:58:36Z",
      "side": 1,
      "message": "Style this if statement same as the one on line 122.",
      "revId": "74d9dc25fb11d4bd0bb96540765aa1be038d8885",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2ea41786_4a260e13",
        "filename": "resources/mobile.references/references.js",
        "patchSetId": 14
      },
      "lineNbr": 2,
      "author": {
        "id": 1948
      },
      "writtenOn": "2016-02-29T18:58:36Z",
      "side": 1,
      "message": "Thank you for the clarification in PS 8. I didn\u0027t realize drawer instantiation resulted in a redraw. This seems a /tad/ odd, but definitely out of scope for this patch. :)",
      "revId": "74d9dc25fb11d4bd0bb96540765aa1be038d8885",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2ea41786_92c0b030",
        "filename": "resources/mobile.references/references.js",
        "patchSetId": 14
      },
      "lineNbr": 2,
      "author": {
        "id": 94
      },
      "writtenOn": "2016-03-01T23:31:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2ea41786_4a260e13",
      "revId": "74d9dc25fb11d4bd0bb96540765aa1be038d8885",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2ea41786_4ac92e54",
        "filename": "resources/mobile.references/references.js",
        "patchSetId": 14
      },
      "lineNbr": 79,
      "author": {
        "id": 1948
      },
      "writtenOn": "2016-02-29T18:58:36Z",
      "side": 1,
      "message": "See comment train on PS 8...\n\nbut not blocking.",
      "revId": "74d9dc25fb11d4bd0bb96540765aa1be038d8885",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2ea41786_7233b45f",
        "filename": "resources/mobile.references/references.js",
        "patchSetId": 14
      },
      "lineNbr": 79,
      "author": {
        "id": 94
      },
      "writtenOn": "2016-03-01T23:31:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2ea41786_4ac92e54",
      "revId": "74d9dc25fb11d4bd0bb96540765aa1be038d8885",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2ea41786_cac75e14",
        "filename": "tests/qunit/mobile.references/test_references.js",
        "patchSetId": 14
      },
      "lineNbr": 8,
      "author": {
        "id": 1948
      },
      "writtenOn": "2016-02-29T18:58:36Z",
      "side": 1,
      "message": "Should remove this from the page in teardown. To quote Krinkle from another patch:\n\"Now that this is [...] in the DOM, move it to setup() so that it can also be torn down instead of leaking to the document outside the test. Doing so may cause other tests to pick it up and change it before this tests even starts.\n\n    setup: function () {\n        this.foo \u003d ..\n    },\n    teardown: function () {\n        $( this.foo ).remove();\n    }\n\"",
      "revId": "74d9dc25fb11d4bd0bb96540765aa1be038d8885",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2ea41786_f2256405",
        "filename": "tests/qunit/mobile.references/test_references.js",
        "patchSetId": 14
      },
      "lineNbr": 8,
      "author": {
        "id": 94
      },
      "writtenOn": "2016-03-01T23:31:14Z",
      "side": 1,
      "message": "QUnit will reset the elements inside the #qunit-fixture element after each test, removing any events that may have existed. [1]\n\n[1] https://qunitjs.com/cookbook/#keeping-tests-atomic",
      "parentUuid": "2ea41786_cac75e14",
      "revId": "74d9dc25fb11d4bd0bb96540765aa1be038d8885",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2ea41786_38bd0c64",
        "filename": "tests/qunit/mobile.references/test_references.js",
        "patchSetId": 14
      },
      "lineNbr": 8,
      "author": {
        "id": 1948
      },
      "writtenOn": "2016-03-03T17:36:07Z",
      "side": 1,
      "message": "Thanks for letting me know; qunit is not my forte. \"Blocker\" unblocked. :)",
      "parentUuid": "2ea41786_f2256405",
      "revId": "74d9dc25fb11d4bd0bb96540765aa1be038d8885",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2ea41786_8ad166d2",
        "filename": "tests/qunit/mobile.references/test_references.js",
        "patchSetId": 14
      },
      "lineNbr": 10,
      "author": {
        "id": 1948
      },
      "writtenOn": "2016-02-29T18:58:36Z",
      "side": 1,
      "message": "Might need to delete in teardown; not sure how much the testing suite does automatically.",
      "revId": "74d9dc25fb11d4bd0bb96540765aa1be038d8885",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2ea41786_328bfce9",
        "filename": "tests/qunit/mobile.references/test_references.js",
        "patchSetId": 14
      },
      "lineNbr": 10,
      "author": {
        "id": 94
      },
      "writtenOn": "2016-03-01T23:31:14Z",
      "side": 1,
      "message": "The variable is a property of the module that is instantiated at the start of every test. Therefore no need to tear down - variables will not leak into the next module or test.",
      "parentUuid": "2ea41786_8ad166d2",
      "revId": "74d9dc25fb11d4bd0bb96540765aa1be038d8885",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2ea41786_6a9c2a13",
        "filename": "tests/qunit/tests.mobilefrontend/references.html",
        "patchSetId": 14
      },
      "lineNbr": 9,
      "author": {
        "id": 1948
      },
      "writtenOn": "2016-02-29T18:58:36Z",
      "side": 1,
      "message": "If it\u0027s not necessary for this second span to be on the same line, then it should be moved below. (But I understand that it might be due to HTML weirdness with whitespace sometimes.)",
      "revId": "74d9dc25fb11d4bd0bb96540765aa1be038d8885",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2ea41786_927bd0ea",
        "filename": "tests/qunit/tests.mobilefrontend/references.html",
        "patchSetId": 14
      },
      "lineNbr": 9,
      "author": {
        "id": 94
      },
      "writtenOn": "2016-03-01T23:31:14Z",
      "side": 1,
      "message": "I consider this to be a code styling nitpick.",
      "parentUuid": "2ea41786_6a9c2a13",
      "revId": "74d9dc25fb11d4bd0bb96540765aa1be038d8885",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    }
  ]
}