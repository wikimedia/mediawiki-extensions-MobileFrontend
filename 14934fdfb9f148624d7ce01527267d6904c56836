{
  "comments": [
    {
      "key": {
        "uuid": "2061e6da_8fb8166f",
        "filename": "src/mobile.mediaViewer/ImageCarousel.js",
        "patchSetId": 12
      },
      "lineNbr": 248,
      "author": {
        "id": 2426
      },
      "writtenOn": "2019-03-28T17:20:44Z",
      "side": 1,
      "message": "If the request is \"canceled\" the promise is rejected, so I think this should never be true.",
      "range": {
        "startLine": 244,
        "startChar": 0,
        "endLine": 248,
        "endChar": 4
      },
      "revId": "14934fdfb9f148624d7ce01527267d6904c56836",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d538471c_0925ee8a",
        "filename": "src/mobile.mediaViewer/ImageCarousel.js",
        "patchSetId": 12
      },
      "lineNbr": 248,
      "author": {
        "id": 6176
      },
      "writtenOn": "2019-03-28T17:38:24Z",
      "side": 1,
      "message": "I think it\u0027s needed and I\u0027ve actually been able to hit this conditional on this patch by rapidly advancing slides. It happens very rarely, but it can definitely happen. \n\nI think this is because JQuery Promises are a bit different than native Promises. JQuery promises schedule each promise callback as a macroTask instead of a microtask in the event loop. What this ultimately means is that click events can happen in between these macrotasks and a click event advancing to the next slide can occur before this callback is executed. I don\u0027t think that would happen if we used native promises but it happens with jquery promises.",
      "parentUuid": "2061e6da_8fb8166f",
      "range": {
        "startLine": 244,
        "startChar": 0,
        "endLine": 248,
        "endChar": 4
      },
      "revId": "14934fdfb9f148624d7ce01527267d6904c56836",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1688150b_0df064b8",
        "filename": "src/mobile.mediaViewer/ImageCarousel.js",
        "patchSetId": 12
      },
      "lineNbr": 248,
      "author": {
        "id": 2426
      },
      "writtenOn": "2019-03-28T20:55:17Z",
      "side": 1,
      "message": "Thanks for bearing with me, I can reproduce this behavior. I think the issue is that xhr.abort() can be called after the AJAX request completes. This is effectively:\n\n var deferred \u003d $.Deferred();\n deferred.then(() \u003d\u003e console.log(\u0027then\u0027));\n deferred.catch(() \u003d\u003e console.log(\u0027catch\u0027));\n deferred.resolve();\n deferred.reject();\n // \u003d\u003e then\n // You can do whatever else you want here but the promise is resolved.\n\nOr:\n\n var xhr \u003d $.ajax(\u0027/\u0027);\n xhr.then(rsp \u003d\u003e console.log(\u0027then\u0027));\n xhr.catch(rsp \u003d\u003e console.log(\u0027catch\u0027, rsp.statusText));\n setTimeout(() \u003d\u003e xhr.abort(), 1000)\n // \u003d\u003e then\n\nDo you agree? In the simple examples, that seems like correct behavior to me.\n\nSo... Canceled suddenly makes sense to me :] In my opinion, I still think that checking index or title would be less error-prone than flipping the boolean but maybe that\u0027s not easy.",
      "parentUuid": "d538471c_0925ee8a",
      "range": {
        "startLine": 244,
        "startChar": 0,
        "endLine": 248,
        "endChar": 4
      },
      "revId": "14934fdfb9f148624d7ce01527267d6904c56836",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "19580888_64ac9dd1",
        "filename": "src/mobile.mediaViewer/ImageCarousel.js",
        "patchSetId": 12
      },
      "lineNbr": 248,
      "author": {
        "id": 6176
      },
      "writtenOn": "2019-03-28T22:25:26Z",
      "side": 1,
      "message": "The fact that the cancellation can happen AFTER the ajax request completes is one big part of this but not the entire picture. \n\nThe other part is that the cancellation can happen AFTER the ajax request completes but BEFORE all of the .then callbacks have executed. That\u0027s what is happening when the promise is cancelled yet the .then resolve handler still executes instead of the reject handler. And this behavior differs between jQuery promises and native promises (at least chrome native promises) Sorry if my explanations are fuzzy, I just researched this stuff this week and am still learning. \n\nConsider the following:\n\n```\n// Note: This jQuery promise has already resolved. Each .then callback will be\n// added to a macrotask queue \n$.Deferred().resolve()\n  .then( () \u003d\u003e { console.log(\u0027in .then 1\u0027); } )\n  .then( () \u003d\u003e { console.log(\u0027in .then 2\u0027); } )\n  .then( () \u003d\u003e { console.log(\u0027in .then 3\u0027); } );\n\n// Imagine the setTimeout as a user clicking the carousel navigation button.\n// Both actions will ultimately add the callback to the SAME macrotask queue for the\n// event loop to go through. This means that click callbacks can execute BETWEEN\n// the execution of .then callbacks!\nsetTimeout( function () { \n  console.log(\"onSlide callback executing!\")\n}, 0 )\n\n// Executing the above will print (at least in chrome):\n// in .then 1\n// onSlide callback executing!\n// in .then 2\n// in .then 3\n\n\n// Native promises behave differently than jquery promises. Once a native\n// promise resolves, any additional .then callbacks will be added to the\n// microtask queue and will also execute because the microtask queue has higher\n// priority than the macrotask queue. What this means is that click callbacks \n// CANNOT execute until the microtask queue is empty and will NEVER execute\n// BETWEEN the execution of .then callbacks!\nPromise.resolve()\n  .then( () \u003d\u003e { console.log(\u0027in .then 1\u0027); } )\n  .then( () \u003d\u003e { console.log(\u0027in .then 2\u0027); } )\n  .then( () \u003d\u003e { console.log(\u0027in .then 3\u0027); } );\n\n// Imagine the setTimeout as a user clicking the carousel navigation button.\n// Both actions will ultimately add the callback to the macrotask queue for the\n// event loop to go through\nsetTimeout( function () { \n  console.log(\"onSlide callback executing!\")\n}, 0 )\n\n// Executing the above will print (at least in chrome):\n// in .then 1\n// in .then 2\n// in .then 3\n// onSlide callback executing!\n```",
      "parentUuid": "1688150b_0df064b8",
      "range": {
        "startLine": 244,
        "startChar": 0,
        "endLine": 248,
        "endChar": 4
      },
      "revId": "14934fdfb9f148624d7ce01527267d6904c56836",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8544de36_9bfb95e0",
        "filename": "src/mobile.mediaViewer/ImageCarousel.js",
        "patchSetId": 12
      },
      "lineNbr": 248,
      "author": {
        "id": 6176
      },
      "writtenOn": "2019-03-28T22:34:31Z",
      "side": 1,
      "message": "I should clarify the following line:\n\nWhat this means is that click callbacks \n// CANNOT execute until the microtask queue is empty and will NEVER execute\n// BETWEEN the execution of .then callbacks!\n\n^^ when I say .then callbacks I mean ones that don\u0027t return promises (like in the example). If the callbacks returned promises then things would be different!",
      "parentUuid": "19580888_64ac9dd1",
      "range": {
        "startLine": 244,
        "startChar": 0,
        "endLine": 248,
        "endChar": 4
      },
      "revId": "14934fdfb9f148624d7ce01527267d6904c56836",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "26876d6f_e48abfab",
        "filename": "src/mobile.mediaViewer/ImageGateway.js",
        "patchSetId": 12
      },
      "lineNbr": 38,
      "author": {
        "id": 2426
      },
      "writtenOn": "2019-03-28T20:55:17Z",
      "side": 1,
      "message": "Not new to this patch but maybe can be simplified to: \n\n Math.max( window.devicePixelRatio || 1, 1 ); // [1, âˆž)\n\nOr\n\n window.devicePixelRatio \u003e 1 ? window.devicePixelRatio : 1",
      "range": {
        "startLine": 37,
        "startChar": 24,
        "endLine": 38,
        "endChar": 30
      },
      "revId": "14934fdfb9f148624d7ce01527267d6904c56836",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "352ecff3_01170437",
        "filename": "src/mobile.mediaViewer/ImageGateway.js",
        "patchSetId": 12
      },
      "lineNbr": 52,
      "author": {
        "id": 2426
      },
      "writtenOn": "2019-03-28T17:20:44Z",
      "side": 1,
      "message": "Consider adding a JSDoc typedef for this response.",
      "range": {
        "startLine": 48,
        "startChar": 13,
        "endLine": 52,
        "endChar": 3
      },
      "revId": "14934fdfb9f148624d7ce01527267d6904c56836",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d4c828d9_d02e9ef6",
        "filename": "src/mobile.mediaViewer/ImageGateway.js",
        "patchSetId": 12
      },
      "lineNbr": 52,
      "author": {
        "id": 6176
      },
      "writtenOn": "2019-03-28T22:25:26Z",
      "side": 1,
      "message": "will do",
      "parentUuid": "352ecff3_01170437",
      "range": {
        "startLine": 48,
        "startChar": 13,
        "endLine": 52,
        "endChar": 3
      },
      "revId": "14934fdfb9f148624d7ce01527267d6904c56836",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8967bf12_32505951",
        "filename": "src/mobile.mediaViewer/ImageGateway.js",
        "patchSetId": 12
      },
      "lineNbr": 77,
      "author": {
        "id": 2426
      },
      "writtenOn": "2019-03-28T17:20:44Z",
      "side": 1,
      "message": "If abort and cancel are the same, we should use the same terminology. Although cancel sounds better to me, I think abort makes more sense given that it\u0027s the terminology used by XHRs. Similarly for the method name.\n\nhttps://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest\n\nYou might be able to replace this state entirely with textStatus. See XHR aborts in Popups and Core.\n\nhttps://gerrit.wikimedia.org/r/plugins/gitiles/mediawiki/extensions/Popups/+/master/src/actions.js#154\nhttps://doc.wikimedia.org/mediawiki-core/master/js/source/category.html#mw-Api (I think there are other examples in Core as well)",
      "range": {
        "startLine": 77,
        "startChar": 12,
        "endLine": 77,
        "endChar": 22
      },
      "revId": "14934fdfb9f148624d7ce01527267d6904c56836",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    }
  ]
}